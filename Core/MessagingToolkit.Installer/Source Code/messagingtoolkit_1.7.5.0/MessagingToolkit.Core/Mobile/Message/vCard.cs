//===============================================================================
// OSML - Open Source Messaging Library
//
//===============================================================================
// Copyright © TWIT88.COM.  All rights reserved.
//
// This file is part of Open Source Messaging Library.
//
// Open Source Messaging Library is free software: you can redistribute it 
// and/or modify it under the terms of the GNU General Public License version 3.
//
// Open Source Messaging Library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this software.  If not, see <http://www.gnu.org/licenses/>.
//===============================================================================

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.Text;
using System.Text.RegularExpressions;


namespace MessagingToolkit.Core.Mobile.Message
{
    /// <summary>
    /// vCard message
    /// </summary>
    /// <summary>
    /// Container class for vCard properties of vCard 2.1.
    /// Considering current implementation of vCard support in MS Outlook, MS Outlook Express, Yahoo Mail and Eudora etc.,
    /// the following properties and attributes are not supported:
    /// * Photo
    /// * Address labels
    /// * Delivery address types
    /// * Mailer
    /// * Timezone
    /// * EMail types
    /// * Sound
    /// * Public key
    /// * Extensions
    /// * Geo
    /// 
    /// So this vCard implementation is expected to be compatible with standard vCard fields of the vCard generated by these programs.
    /// </summary>
    [global::System.Serializable]
    public class vCard: Sms
    {
        #region ============================================ Constants ======================================

        /// <summary>
        /// vCard destination port
        /// </summary>
        private const int vCardDestinationPort = 9204;

        /// <summary>
        /// vCard source port
        /// </summary>
        private const int vCardSourcePort = 0;

        #endregion ==========================================================================================


        #region ============================================ Variables ======================================


        private readonly char[] lineBreak = { '\n', '\r' };

        private string formattedName;
        private string surname;
        private string givenName;
        private string middleName;
        private string prefix;
        private string suffix;
        private string title;
        private DateTime birthday;
        private DateTime rev = DateTime.MinValue;
        private string org;
        private string department;
        private string note;
        private string role;

        private Collection<Address> addresses = new Collection<Address>();
        private Collection<PhoneNumber> phones = new Collection<PhoneNumber>();
        private Collection<EmailAddress> emails = new Collection<EmailAddress>();
        private Collection<URL> urls = new Collection<URL>();

        /// <summary>
        /// Load vCard from string
        /// </summary>
        private bool loadFromString;

        #endregion ==========================================================================================

        /// <summary>
        /// Private constructor
        /// </summary>
        private vCard(): base()
        {
            this.DataCodingScheme = MessageDataCodingScheme.EightBits;       
            this.SourcePort = vCardSourcePort;
            this.DestinationPort = vCardDestinationPort;
            //this.MessageEncoding = SmartMessageEncoding.QuotedPrintable;
        }

        #region ============================================ Properties ======================================

        /// <summary>
        /// </summary>
        /// <value></value>
        public string FormattedName
        {
            get
            {
                return formattedName;
            }
            set
            {
                formattedName = value.TrimEnd(lineBreak);
            }
        }

        /// <summary>
        /// </summary>
        /// <value></value>
        public string Surname
        {
            get
            {
                return surname;
            }
            set
            {
                surname = value.TrimEnd(lineBreak);
            }
        }

        /// <summary>
        /// </summary>
        /// <value></value>
        public string GivenName
        {
            get
            {
                return givenName;
            }
            set
            {
                givenName = value.TrimEnd(lineBreak);
            }
        }


        /// <summary>
        /// </summary>
        /// <value></value>
        public string MiddleName
        {
            get
            {
                return middleName;
            }
            set
            {
                middleName = value.TrimEnd(lineBreak);
            }
        }


        /// <summary>
        /// </summary>
        /// <value></value>
        public string Prefix
        {
            get
            {
                return prefix;
            }
            set
            {
                prefix = value.TrimEnd(lineBreak);
            }
        }


        /// <summary>
        /// </summary>
        /// <value></value>
        public string Suffix
        {
            get
            {
                return suffix;
            }
            set
            {
                suffix = value.TrimEnd(lineBreak);
            }
        }

        /// <summary>
        /// </summary>
        /// <value></value>
        public string Title
        {
            get
            {
                return title;
            }
            set
            {
                title = value.TrimEnd(lineBreak);
            }
        }

        /// <summary>
        /// </summary>
        /// <value></value>
        public DateTime Birthday
        {
            get
            {
                return birthday;
            }
            set
            {
                birthday = value;
            }
        }


        /// <summary>
        /// If Rev in vCard is UTC, Rev will convert utc to local datetime.
        /// </summary>
        public DateTime Rev
        {
            get
            {
                return rev;
            }
            set
            {
                rev = value;
            }
        }

        /// <summary>
        /// </summary>
        /// <value></value>
        public string Org
        {
            get
            {
                return org;
            }
            set
            {
                org = value.TrimEnd(lineBreak);
            }
        }


        /// <summary>
        /// </summary>
        /// <value></value>
        public string Department
        {
            get
            {
                return department;
            }
            set
            {
                department = value.TrimEnd(lineBreak);
            }
        }


        /// <summary>
        /// </summary>
        /// <value></value>
        public string Note
        {
            get
            {
                return note;
            }
            set
            {
                note = value.TrimEnd(lineBreak);
            }
        }

        /// <summary>
        /// </summary>
        /// <value></value>
        public string Role
        {
            get
            {
                return role;
            }
            set
            {
                role = value.TrimEnd(lineBreak);
            }
        }

        /// <summary>
        /// </summary>
        /// <value></value>
        public Collection<Address> Addresses
        {
            get
            {
                return addresses;
            }
            set
            {
                addresses = value;
            }
        }

        /// <summary>
        /// </summary>
        /// <value></value>
        public Collection<PhoneNumber> Phones
        {
            get
            {
                return phones;
            }
            set
            {
                phones = value;
            }
        }

        /// <summary>
        /// </summary>
        /// <value></value>
        public Collection<EmailAddress> Emails
        {
            get
            {
                return emails;
            }
            set
            {
                emails = value;
            }
        }

        /// <summary>
        /// </summary>
        /// <value></value>
        public Collection<URL> URLs
        {
            get
            {
                return urls;
            }
            set
            {
                urls = value;
            }
        }


        /// <summary>
        /// Gets or sets the encoding.
        /// </summary>
        /// <value>The encoding.</value>
        //public SmartMessageEncoding MessageEncoding
        //{
        //    get;
        //    set;
        //}

        #endregion ======================================================================================

        #region ============== Public Methods  =========================================================


        /// <summary>
        /// Load vCalendar content from a string
        /// </summary>
        /// <param name="value">vCalendar</param>
        /// <returns>true if loaded successfully</returns>
        public bool LoadString(string value)
        {
            this.Content = value;
            this.loadFromString = true;
            return true;
        }

        /// <summary>
        /// Generate the vCard content
        /// </summary>
        /// <returns>vCard content</returns>
        public override string ToString()
        {
            StringBuilder r = new StringBuilder();
            r.AppendLine("BEGIN:VCARD");
            r.AppendLine("VERSION:2.1");

            if (QuotedPrintable.NeedQuotedPrintable(Surname) || QuotedPrintable.NeedQuotedPrintable(GivenName) ||
                QuotedPrintable.NeedQuotedPrintable(MiddleName))
                r.AppendLine("N;CHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE:" + QuotedPrintable.Encode(Surname) + ";" +
                    QuotedPrintable.Encode(GivenName) + ";" + QuotedPrintable.Encode(MiddleName) + ";" + Prefix + ";" + Suffix);
            else
                r.AppendLine("N:" + Surname + ";" + GivenName + ";" + MiddleName + ";" + Prefix + ";" + Suffix);

            if (QuotedPrintable.NeedQuotedPrintable(FormattedName))
                r.AppendLine("FN;CHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE:" + QuotedPrintable.Encode(FormattedName));
                //r.AppendLine("FN;CHARSET=UTF-8;ENCODING=8BIT:" + QuotedPrintable.Encode8Bit(FormattedName));
            else
                r.AppendLine("FN:" + FormattedName);

            if (!string.IsNullOrEmpty(Title))
            {
                if (QuotedPrintable.NeedQuotedPrintable(Title))
                    r.AppendLine("TITLE;CHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE:" + QuotedPrintable.Encode(Title));
                else
                    r.AppendLine("TITLE:" + Title);
            }

            if (!(string.IsNullOrEmpty(Org) && string.IsNullOrEmpty(Department)))
            {
                if (QuotedPrintable.NeedQuotedPrintable(Org) || QuotedPrintable.NeedQuotedPrintable(Department))
                    r.AppendLine("ORG;CHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE:" + QuotedPrintable.Encode(Org) +
                        (string.IsNullOrEmpty(Department) ? "" : ";" + QuotedPrintable.Encode(Department)));
                else
                    r.AppendLine("ORG:" + Org + (string.IsNullOrEmpty(Department) ? "" : ";" + Department));
            }
            if (!string.IsNullOrEmpty(Role))
                if (QuotedPrintable.NeedQuotedPrintable(Role))
                    r.AppendLine("ROLE;CHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE:" + QuotedPrintable.Encode(Role));
                else
                    r.AppendLine("ROLE:" + Role);

            if (Birthday > DateTime.MinValue)
                r.AppendLine("BDAY:" + Birthday.ToString("yyyyMMdd"));

            foreach (EmailAddress email in Emails)
            {
                if (QuotedPrintable.NeedQuotedPrintable(email.Address))
                    r.AppendLine("EMAIL" + (email.Pref ? ";PREF;CHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE" : ";INTERNET;CHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE") + ":" + QuotedPrintable.Encode(email.Address));
                else
                    r.AppendLine("EMAIL" + (email.Pref ? ";PREF" : ";INTERNET") + ":" + email.Address);
            }

            foreach (PhoneNumber p in Phones)
            {
                r.AppendLine("TEL" + (p.Pref ? ";PREF" : "") + HomeWorkTypeToString(p.HomeWorkType) + PhoneTypesToString(p.PhoneType) + ":" + p.Number);
            }

            foreach (Address adr in Addresses)
            {
                if (QuotedPrintable.NeedQuotedPrintable(adr.Street) || QuotedPrintable.NeedQuotedPrintable(adr.POBox) || 
                    QuotedPrintable.NeedQuotedPrintable(adr.Locality) ||
                    QuotedPrintable.NeedQuotedPrintable(adr.Region) || QuotedPrintable.NeedQuotedPrintable(adr.Postcode) ||
                    QuotedPrintable.NeedQuotedPrintable(adr.Country))
                    r.AppendLine("ADR;CHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE" + HomeWorkTypeToString(adr.HomeWorkType) + ":" + QuotedPrintable.Encode(adr.POBox) + ";" + QuotedPrintable.Encode(adr.Ext) +
                       ";" + QuotedPrintable.Encode(adr.Street) + ";" + QuotedPrintable.Encode(adr.Locality) + ";" + 
                       QuotedPrintable.Encode(adr.Region) + ";" + QuotedPrintable.Encode(adr.Postcode) + ";" + QuotedPrintable.Encode(adr.Country));
                else
                    r.AppendLine("ADR" + HomeWorkTypeToString(adr.HomeWorkType) + ":" + adr.POBox + ";" + adr.Ext +
                        ";" + adr.Street + ";" + adr.Locality + ";" + adr.Region + ";" + adr.Postcode + ";" + adr.Country);
            }

            foreach (URL url in URLs)
            {
                if (QuotedPrintable.NeedQuotedPrintable(url.Address))
                    r.AppendLine("URL;CHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE" + HomeWorkTypeToString(url.HomeWorkTypes) + ":" + QuotedPrintable.Encode(url.Address));
                else
                    r.AppendLine("URL" + HomeWorkTypeToString(url.HomeWorkTypes) + ":" + url.Address);
            }

            if (!string.IsNullOrEmpty(Note))
                r.AppendLine("NOTE;CHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE:" + QuotedPrintable.Encode(Note));

            if (Rev > DateTime.MinValue)
                r.AppendLine("REV:" + Rev.ToString("yyyyMMddTHHmmssZ"));

            r.Append("END:VCARD");

            return r.ToString();

        }

       
        private string PhoneTypesToString(PhoneTypes phoneTypes)
        {
            if (phoneTypes == PhoneTypes.None)
                return "";
            else
                return ";" + phoneTypes.ToString("G").Replace(',', ';');
        }

        private string HomeWorkTypeToString(HomeWorkTypes homeWorkType)
        {
            switch (homeWorkType)
            {
                case HomeWorkTypes.None:
                    return "";
                case HomeWorkTypes.Home:
                    return ";HOME";
                case HomeWorkTypes.Work:
                    return ";WORK";
                default:
                    return "";
            }
        }

        /// <summary>
        /// Encode the vCard content
        /// </summary>
        /// <returns>Encoded vCard content</returns>
        internal override byte[] GetPdu()
        {
            if (!this.loadFromString)
                this.Content = ToString();
            return Encoding.GetEncoding("iso-8859-1").GetBytes(this.Content);

            //return MessagingToolkit.Pdu.PduUtils.StringToUnencodedSeptets(this.Content);   
            //byte[] septets =  MessagingToolkit.Pdu.PduUtils.StringToUnencodedSeptets(this.Content);
            //return MessagingToolkit.Pdu.PduUtils.UnencodedSeptetsToEncodedSeptets(septets);
            //return base.GetPdu();
        }

        #endregion ===================================================================================

        #region ============== Factory method   =====================================================


        /// <summary>
        /// Static factory to create the vCard instance
        /// </summary>
        /// <returns>A new instance of the vCard object</returns>
        public new static vCard NewInstance()
        {
            return new vCard();
        }

        #endregion ===================================================================================
    }


    /// <summary>
    /// You may combine HomeWorkType and PhoneType, and FLAG them to reflect the attributes of vCard.
    /// </summary>
    public enum HomeWorkTypes
    {
        None,

        Home,

        Work
    }

    /// <summary>
    /// Phone types
    /// </summary>
    [Flags]
    public enum PhoneTypes
    {
        /// <summary>
        /// No defined
        /// </summary>
        None = 0,

        /// <summary>
        /// Voice
        /// </summary>
        Voice = 1,

        /// <summary>
        /// Fax
        /// </summary>
        Fax = 2,

        /// <summary>
        /// Message
        /// </summary>
        Msg = 4,

        /// <summary>
        /// Cell
        /// </summary>
        Cell = 8,

        /// <summary>
        /// Pager
        /// </summary>
        Pager = 16

    }
    /// <summary>
    /// If you flag the enume types, you may use flags.
    /// </summary>
    [global::System.Serializable]
    public class PhoneNumber
    {
        private string number;
        private HomeWorkTypes homeWorkTypes;
        private bool pref;
        private PhoneTypes phoneTypes;


        public string Number
        {
            get
            {
                return number;
            }
            set
            {
                number = value;
            }
        }



        public HomeWorkTypes HomeWorkType
        {
            get
            {
                return homeWorkTypes;
            }
            set
            {
                homeWorkTypes = value;
            }
        }

        public bool Pref
        {
            get
            {
                return pref;
            }
            set
            {
                pref = value;
            }
        }

        public PhoneTypes PhoneType
        {
            get
            {
                return phoneTypes;
            }
            set
            {
                phoneTypes = value;
            }
        }

    }

    [global::System.Serializable]
    public class EmailAddress
    {
        private string address;
        private bool pref;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAddress"/> class.
        /// </summary>
        public EmailAddress()
        {
            this.address = string.Empty;
            this.pref = false;
        }

        public string Address
        {
            get
            {
                return address;
            }
            set
            {
                address = value;
            }
        }


        public bool Pref
        {
            get
            {
                return pref;
            }
            set
            {
                pref = value;
            }
        }
    }

    [global::System.Serializable]
    public class URL
    {
        private string address;
        private HomeWorkTypes homeWorkTypes;

        public string Address
        {
            get
            {
                return address;
            }
            set
            {
                address = value;
            }
        }


        public HomeWorkTypes HomeWorkTypes
        {
            get
            {
                return homeWorkTypes;
            }
            set
            {
                homeWorkTypes = value;
            }
        }
    }

    /// <summary>
    /// </summary>
    [global::System.Serializable]
    public class Address
    {
        readonly char[] lineBreak = { '\n', '\r' };

        private string po;
        private string ext;
        private string street;
        private string locality;
        private string region;
        private string postcode;
        private string country;
        private HomeWorkTypes homeWorkType;

        public string POBox
        {
            get
            {
                return po;
            }
            set
            {
                po = value.TrimEnd(lineBreak);
            }
        }


        public string Ext
        {
            get
            {
                return ext;
            }
            set
            {
                ext = value.TrimEnd(lineBreak);
            }
        }


        public string Street
        {
            get
            {
                return street;
            }
            set
            {
                street = value.TrimEnd(lineBreak);
            }
        }


        public string Locality
        {
            get
            {
                return locality;
            }
            set
            {
                locality = value.TrimEnd(lineBreak);
            }
        }


        public string Region
        {
            get
            {
                return region;
            }
            set
            {
                region = value.TrimEnd(lineBreak);
            }
        }


        public string Postcode
        {
            get
            {
                return postcode;
            }
            set
            {
                postcode = value.TrimEnd(lineBreak);
            }
        }


        public string Country
        {
            get
            {
                return country;
            }
            set
            {
                country = value.TrimEnd(lineBreak);
            }
        }



        public HomeWorkTypes HomeWorkType
        {
            get
            {
                return homeWorkType;
            }
            set
            {
                homeWorkType = value;
            }
        }
    }

    public enum LabelTypes
    {
        Dom,

        Intl,

        Postal,

        Parcel

    }

    /// <summary>
    /// Not used yet. You may use regular expressions or string.Replace() to replace =0D=0A to line breaks.
    /// </summary>
    [global::System.Serializable]
    public class Label
    {
        private string address;

        private LabelTypes labelType;

        public string Address
        {
            get
            {
                return address;
            }
            set
            {
                address = value;
            }
        }


        public LabelTypes LabelType
        {
            get
            {
                return labelType;
            }
            set
            {
                labelType = value;
            }
        }
    }

}