using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using MessagingToolkit.Barcode.Common;
using MessagingToolkit.Barcode.Common.Detector;
using MessagingToolkit.Barcode.Pdf417.Decoder;

namespace MessagingToolkit.Barcode.Pdf417.Detector
{
    /// <summary>
    /// PDF417 image detection. 
    /// 
    /// Please refer to http://code.google.com/p/zxing/issues/detail?id=817
    /// </summary>
    public sealed class Detector2
    {
        private const int PATTERN_NOT_FOUND = -1;
        private const int START_PATTERN_FOUND = 1;
        private const int END_PATTERN_FOUND = 2;

        private int[] START_PATTERN = { 8, 1, 1, 1, 1, 1, 1, 3 };

        private string[] EDGE_DISTANCE_TABLE = {
            "773325", "773652", "772236", "772225", "772563", "772552", "784324", "783235", "783224", 
            "795323", "794234", "794223", "665544", "665522", "665633", "664455", "664444", 
            "664433", "664422", "664425", "664544", "664533", "664752", "663366", "663336", 
            "663322", "663325", "663455", "663433", "663544", "663663", "663652", "662266", 
            "662255", "662244", "662247", "662233", "662236", "662222", "662225", "662366", 
            "662355", "662344", "662333", "662336", "662455", "662444", "662574", "662563", 
            "662552", "662663", "675424", "674335", "674324", "673246", "673235", "673224", 
            "673335", "673662", "686423", "685334", "685323", "684245", "684234", "684223", 
            "684334", "696333", "696322", "695244", "695233", "695222", "695333", "556644", 
            "556622", "555555", "555533", "555522", "555525", "555644", "555633", "555852", 
            "554466", "554455", "554433", "554436", "554422", "554425", "554555", "554544", 
            "554533", "554644", "554763", "554752", "553377", "553355", "553347", "553333", 
            "553336", "553322", "553325", "553466", "553444", "553433", "553436", "553555", 
            "553544", "553674", "553663", "553652", "553763", "552266", "552255", "552258", 
            "552244", "552247", "552233", "552236", "552225", "552377", "552366", "552355", 
            "552344", "552347", "552333", "552336", "552466", "552455", "552444", "552585", 
            "552574", "552563", "552552", "552555", "552674", "552663", "566524", "565435", 
            "565424", "565554", "565543", "565532", "565643", "564346", "564335", "564324", 
            "564465", "564454", "564443", "564432", "564435", "564554", "564543", "564762", 
            "563257", "563246", "563235", "563224", "563227", "563376", "563365", "563354", 
            "563343", "563346", "563332", "563335", "563465", "563454", "563443", "563554", 
            "563673", "563662", "577523", "576434", "576423", "575345", "575323", "575434", 
            "574256", "574245", "574234", "574223", "574226", "574345", "574334", "588522", 
            "587433", "587422", "586344", "586322", "586433", "585255", "585244", "585233", 
            "585222", "585225", "585344", "585333", "596343", "596332", "447744", "447722", 
            "446655", "446633", "446622", "446625", "446952", "445566", "445555", "445533", 
            "445536", "445522", "445525", "445655", "445644", "445633", "445744", "445863", 
            "445852", "444477", "444447", "444433", "444436", "444422", "444425", "444566", 
            "444544", "444533", "444536", "444655", "444644", "444774", "444763", "444752", 
            "444863", "443366", "443358", "443344", "443336", "443325", "443466", "443444", 
            "443447", "443433", "443436", "443566", "443555", "443544", "443685", "443663", 
            "443652", "443655", "443774", "443763", "442277", "442266", "442269", "442255", 
            "442258", "442244", "442247", "442236", "442225", "442377", "442366", "442355", 
            "442358", "442344", "442347", "442333", "442336", "442466", "442455", "442444", 
            "442447", "442596", "442585", "442574", "442563", "442566", "442552", "442555", 
            "442685", "442674", "442663", "442774", "457624", "457732", "456535", "456524", 
            "456654", "456643", "456632", "456743", "455446", "455435", "455424", "455565", 
            "455543", "455532", "455535", "455654", "455643", "455862", "454357", "454346", 
            "454335", "454324", "454327", "454476", "454465", "454443", "454446", "454432", 
            "454435", "454565", "454554", "454543", "454654", "454773", "454762", "453268", 
            "453257", "453246", "453235", "453238", "453224", "453227", "453365", "453354", 
            "453357", "453343", "453346", "453332", "453335", "453465", "453454", "453443", 
            "453446", "453565", "453554", "453684", "453673", "453662", "453773", "468623", 
            "467534", "467523", "466445", "466434", "466423", "466534", "465356", "465334", 
            "465323", "465326", "465445", "465434", "465564", "465553", "465542", "465653", 
            "464267", "464256", "464245", "464234", "464237", "464223", "464226", "464356", 
            "464345", "464334", "464464", "464453", "464442", "464445", "464564", "464553", 
            "464772", "479622", "478533", "478522", "477444", "477433", "477422", "477533", 
            "476355", "476344", "476322", "476325", "476444", "476433", "475266", "475255", 
            "475244", "475233", "475236", "475222", "475225", "475355", "475344", "475333", 
            "475444", "488532", "487324", "487443", "487432", "486235", "486224", "486354", 
            "486343", "486332", "486443", "337733", "337725", "336666", "336655", "336633", 
            "336636", "336622", "336625", "336733", "336963", "336952", "335555", "335547", 
            "335533", "335536", "335522", "335525", "335666", "335644", "335633", "335636", 
            "335874", "335863", "335852", "335963", "334477", "334455", "334458", "334444", 
            "334436", "334425", "334577", "334566", "334544", "334547", "334533", "334536", 
            "334666", "334655", "334644", "334785", "334763", "334752", "334874", "334863", 
            "333369", "333355", "333358", "333336", "333325", "333466", "333458", "333444", 
            "333447", "333433", "333436", "333555", "333544", "333547", "333696", "333685", 
            "333663", "333666", "333652", "333655", "333785", "333774", "333763", "333874", 
            "332266", "332269", "332255", "332258", "332247", "332236", "332225", "332377", 
            "332366", "332369", "332355", "332358", "332344", "332347", "332336", "332477", 
            "332466", "332455", "332458", "332444", "332447", "332596", "332585", "332574", 
            "332563", "332566", "332552", "332555", "332696", "332685", "332674", "332663", 
            "332666", "332785", "332774", "348724", "347635", "347624", "347754", "347732", 
            "346546", "346535", "346524", "346665", "346643", "346632", "346635", "346743", 
            "346962", "345457", "345435", "345424", "345427", "345576", "345565", "345543", 
            "345546", "345532", "345535", "345665", "345654", "345643", "345873", "345862", 
            "344368", "344357", "344335", "344338", "344324", "344327", "344465", "344457", 
            "344443", "344446", "344432", "344435", "344576", "344554", "344543", "344546", 
            "344665", "344654", "344784", "344773", "344762", "344873", "343279", "343268", 
            "343257", "343246", "343249", "343235", "343238", "343224", "343227", "343376", 
            "343365", "343368", "343354", "343357", "343343", "343346", "343335", "343476", 
            "343465", "343454", "343457", "343443", "343446", "343565", "343554", "343695", 
            "343684", "343673", "343662", "343665", "343784", "343773", "359723", "358634", 
            "358623", "357545", "357534", "357523", "357634", "357742", "356456", "356434", 
            "356423", "356426", "356545", "356534", "356664", "356653", "356642", "355367", 
            "355356", "355334", "355337", "355323", "355326", "355456", "355445", "355434", 
            "355553", "355542", "355545", "355664", "355653", "355872", "354278", "354267", 
            "354256", "354245", "354248", "354234", "354237", "354223", "354226", "354367", 
            "354356", "354345", "354334", "354337", "354464", "354453", "354456", "354442", 
            "354445", "354564", "354553", "354664", "354783", "354772", "369633", "369622", 
            "368544", "368533", "368522", "368633", "367455", "367433", "367422", "367425", 
            "367544", "367533", "366366", "366355", "366333", "366336", "366322", "366325", 
            "366455", "366444", "366433", "366544", "365277", "365266", "365255", "365244", 
            "365247", "365233", "365236", "365222", "365225", "365366", "365355", "365344", 
            "365333", "365336", "365455", "365444", "365563", "365552", "365663", "379632", 
            "378424", "378543", "378532", "377335", "377324", "377454", "377443", "377432", 
            "377543", "376246", "376235", "376224", "376365", "376354", "376343", "376332", 
            "376335", "376454", "376443", "388334", "388323", "388542", "387245", "387234", 
            "387223", "387334", "387453", "387442", "227766", "227736", "227722", "227725", 
            "226666", "226655", "226644", "226647", "226633", "226636", "226622", "226625", 
            "226755", "226744", "226733", "226736", "226974", "226963", "226952", "225566", 
            "225555", "225558", "225544", "225547", "225533", "225536", "225525", "225677", 
            "225666", "225655", "225644", "225647", "225633", "225636", "225766", "225885", 
            "225874", "225863", "225852", "225974", "225963", "224477", "224466", "224469", 
            "224455", "224458", "224444", "224447", "224436", "224425", "224577", "224566", 
            "224555", "224558", "224544", "224547", "224533", "224536", "224666", "224655", 
            "224644", "224647", "224796", "224785", "224774", "224763", "224752", "224755", 
            "224885", "224874", "224863", "224974", "223377", "223366", "223369", "223355", 
            "223358", "223347", "223336", "223325", "223466", "223469", "223455", "223458", 
            "223444", "223447", "223436", "223566", "223555", "223558", "223544", "223547", 
            "223696", "223685", "223674", "223677", "223663", "223666", "223652", "223655", 
            "223796", "223785", "223774", "223763", "223885", "223874", "222277", "222266", 
            "222269", "222258", "222247", "222236", "222366", "222369", "222355", "222358", 
            "222347", "222336", "222466", "222469", "222455", "222458", "222444", "222447", 
            "222596", "222585", "222574", "222563", "222566", "222555", "222696", "222685", 
            "222674", "222663", "222666", "222796", "222785", "222774", "238735", "238724", 
            "237646", "237635", "237624", "237765", "237754", "237743", "237735", "236557", 
            "236546", "236535", "236524", "236527", "236665", "236654", "236643", "236646", 
            "236632", "236635", "236765", "236754", "236743", "236973", "236962", "235468", 
            "235457", "235446", "235435", "235438", "235424", "235427", "235576", "235565", 
            "235554", "235557", "235543", "235546", "235532", "235535", "235676", "235665", 
            "235654", "235643", "235646", "235765", "235754", "235884", "235873", "235862", 
            "235973", "234379", "234368", "234357", "234346", "234349", "234335", "234338", 
            "234324", "234327", "234465", "234468", "234454", "234457", "234443", "234446", 
            "234435", "234565", "234554", "234557", "234543", "234546", "234676", "234665", 
            "234654", "234795", "234784", "234773", "234762", "234765", "234884", "234873", 
            "233279", "233268", "233257", "233246", "233249", "233235", "233238", "233227", 
            "233376", "233379", "233365", "233368", "233354", "233357", "233346", "233335", 
            "233476", "233465", "233468", "233454", "233457", "233443", "233446", "233576", 
            "233565", "233554", "233557", "233695", "233684", "233673", "233676", "233662", 
            "233665", "233795", "233784", "233773", "249734", "249723", "248645", "248634", 
            "248623", "248734", "247556", "247545", "247534", "247523", "247526", "247645", 
            "247634", "247742", "246467", "246456", "246445", "246434", "246437", "246423", 
            "246426", "246556", "246545", "246534", "246675", "246664", "246653", "246642", 
            "246645", "246764", "246753", "246972", "245378", "245367", "245356", "245345", 
            "245348", "245334", "245337", "245323", "245326", "245467", "245456", "245445", 
            "245434", "245437", "245564", "245553", "245556", "245542", "245545", "245664", 
            "245653", "245764", "245883", "245872", "244278", "244267", "244256", "244259", 
            "244245", "244248", "244234", "244237", "244226", "244378", "244367", "244356", 
            "244345", "244348", "244334", "244337", "244475", "244464", "244467", "244453", 
            "244456", "244442", "244445", "244564", "244553", "244556", "244664", "244794", 
            "244783", "244772", "259644", "259633", "259622", "259733", "258555", "258544", 
            "258533", "258522", "258525", "258644", "258633", "257466", "257455", "257444", 
            "257433", "257436", "257422", "257425", "257555", "257544", "257533", "257644", 
            "257763", "257752", "256377", "256366", "256355", "256344", "256347", "256333", 
            "256336", "256322", "256325", "256466", "256455", "256444", "256433", "256436", 
            "256555", "256544", "256674", "256663", "256652", "256763", "255277", "255266", 
            "255255", "255258", "255244", "255247", "255233", "255236", "255225", "255377", 
            "255366", "255355", "255344", "255347", "255333", "255336", "255466", "255455", 
            "255444", "255574", "255563", "255552", "255555", "255674", "255663", "269524", 
            "269643", "269632", "268435", "268424", "268554", "268543", "268532", "268643", 
            "267346", "267335", "267324", "267465", "267454", "267443", "267432", "267435", 
            "267554", "267543", "266257", "266246", "266235", "266224", "266376", "266365", 
            "266354", "266343", "266346", "266332", "266335", "266465", "266454", "266443", 
            "266554", "279434", "279423", "279642", "278345", "278334", "278323", "278434", 
            "278553", "278542", "277256", "277245", "277234", "277223", "277345", "277334", 
            "277464", "277453", "277442", "277553", "873542", "872453", "872442", "765523", 
            "764434", "764642", "763334", "763323", "763434", "763553", "763542", "762234", 
            "762226", "762464", "762453", "762442", "762553", "773225", "773552", "784224", 
            "795223", "656623", "655534", "655523", "655742", "654445", "654423", "654534", 
            "654653", "654642", "653356", "653323", "653326", "653445", "653434", "653564", 
            "653553", "653542", "653653", "652267", "652256", "652245", "652234", "652237", 
            "652223", "652226", "652356", "652345", "652334", "652475", "652464", "652453", 
            "652442", "652445", "652564", "652553", "652772", "666533", "666522", "665444", 
            "665422", "665533", "664355", "664322", "664325", "664652", "663266", "663255", 
            "663244", "663233", "663236", "663222", "663225", "663355", "663344", "663333", 
            "663444", "663563", "663552", "675324", "674235", "674224", "686323", "685234", 
            "685223", "696233", "696222", "546634", "546623", "546842", "545545", "545534", 
            "545523", "545634", "545753", "545742", "544456", "544434", "544423", "544426", 
            "544545", "544534", "544664", "544653", "544642", "544753", "543356", "543334", 
            "543337", "543323", "543326", "543456", "543434", "543575", "543553", "543542", 
            "543545", "543664", "543653", "543872", "542256", "542245", "542248", "542234", 
            "542237", "542223", "542226", "542356", "542345", "542334", "542337", "542486", 
            "542475", "542464", "542453", "542456", "542442", "542445", "542575", "542564", 
            "542553", "542664", "542783", "542772", "556544", "556533", "556522", "556633", 
            "555455", "555433", "555422", "555425", "555544", "555752", "554366", "554355", 
            "554333", "554336", "554322", "554325", "554444", "554663", "554652", "553266", 
            "553255", "553244", "553247", "553233", "553236", "553222", "553225", "553366", 
            "553344", "553455", "553574", "553563", "553552", "566424", "566543", "566532", 
            "565335", "565324", "565454", "565443", "565432", "564246", "564235", "564224", 
            "564365", "564354", "564343", "564332", "564662", "577423", "576334", "576323", 
            "575245", "575234", "575223", "575334", "588422", "587333", "587322", "586244", 
            "586233", "586222", "586333", "437723", "437942", "436645", "436634", "436623", 
            "436853", "436842", "435556", "435534", "435523", "435526", "435645", "435634", 
            "435764", "435742", "435853", "434467", "434456", "434434", "434437", "434423", 
            "434426", "434556", "434545", "434534", "434675", "434653", "434642", "434645", 
            "434764", "434753", "434972", "433356", "433348", "433334", "433337", "433323", 
            "433326", "433445", "433434", "433437", "433586", "433575", "433553", "433556", 
            "433542", "433545", "433675", "433664", "433653", "433764", "433883", "433872", 
            "432256", "432259", "432245", "432248", "432234", "432237", "432226", "432356", 
            "432345", "432348", "432334", "432337", "432497", "432486", "432475", "432464", 
            "432453", "432456", "432442", "432445", "432586", "432575", "432564", "432553", 
            "432556", "432675", "432664", "432794", "432783", "432772", "447644", "447633", 
            "446555", "446533", "446522", "446525", "446644", "446852", "445466", "445455", 
            "445433", "445436", "445422", "445425", "445544", "445763", "445752", "444377", 
            "444355", "444347", "444333", "444336", "444322", "444325", "444466", "444444", 
            "444555", "444674", "444663", "444652", "443266", "443255", "443258", "443244", 
            "443247", "443233", "443236", "443225", "443355", "443347", "443333", "443455", 
            "443585", "443574", "443563", "443552", "443674", "457524", "457632", "456435", 
            "456424", "456554", "456543", "456532", "455346", "455335", "455324", "455465", 
            "455443", "455432", "455554", "455762", "454257", "454246", "454235", "454224", 
            "454227", "454376", "454365", "454354", "454343", "454332", "454454", "454673", 
            "454662", "468523", "467434", "467423", "466345", "466334", "466323", "466542", 
            "465256", "465245", "465234", "465223", "465226", "465345", "465464", "465453", 
            "465442", "479522", "478433", "478422", "477344", "477333", "477322", "476255", 
            "476244", "476233", "476222", "476225", "476333", "488432", "487224", "487343", 
            "487332", "327745", "327734", "327953", "327942", "326656", "326645", "326634", 
            "326623", "326626", "326864", "326853", "326842", "326953", "325567", "325556", 
            "325545", "325534", "325537", "325523", "325526", "325656", "325645", "325634", 
            "325775", "325764", "325753", "325742", "325745", "325864", "325853", "324456", 
            "324445", "324448", "324434", "324437", "324423", "324426", "324556", "324545", 
            "324534", "324537", "324686", "324675", "324664", "324653", "324656", "324642", 
            "324645", "324775", "324764", "324753", "324864", "324983", "324972", "323367", 
            "323356", "323359", "323345", "323348", "323334", "323337", "323326", "323467", 
            "323456", "323445", "323448", "323434", "323437", "323597", "323586", "323575", 
            "323564", "323567", "323553", "323556", "323542", "323545", "323686", "323675", 
            "323664", "323653", "323656", "323775", "323764", "323894", "323883", "323872", 
            "322267", "322256", "322259", "322245", "322248", "322237", "322226", "322356", 
            "322359", "322345", "322348", "322334", "322337", "322497", "322486", "322475", 
            "322464", "322467", "322453", "322456", "322445", "322597", "322586", "322575", 
            "322564", "322567", "322553", "322556", "322686", "322675", "322664", "322794", 
            "322783", "322772", "322775", "337655", "337625", "337952", "336566", "336555", 
            "336544", "336533", "336536", "336522", "336525", "336644", "336863", "336852", 
            "335477", "335466", "335455", "335444", "335447", "335433", "335436", "335422", 
            "335425", "335566", "335544", "335655", "335774", "335763", "335752", "334377", 
            "334366", "334355", "334358", "334344", "334347", "334333", "334336", "334325", 
            "334466", "334447", "334433", "334555", "334685", "334674", "334663", "334652", 
            "334774", "333266", "333269", "333255", "333258", "333244", "333247", "333236", 
            "333225", "333366", "333344", "333347", "333333", "333455", "333596", "333585", 
            "333574", "333563", "333566", "333552", "333674", "348624", "347535", "347524", 
            "346446", "346435", "346424", "346565", "346554", "346543", "346532", "346654", 
            "346862", "345357", "345346", "345335", "345324", "345327", "345476", "345465", 
            "345454", "345443", "345446", "345432", "345554", "345773", "345762", "344268", 
            "344257", "344246", "344235", "344238", "344224", "344227", "344365", "344354", 
            "344343", "344346", "344332", "344454", "344565", "344684", "344673", "344662", 
            "359623", "358534", "358523", "357445", "357434", "357423", "357653", "357642", 
            "356356", "356345", "356334", "356323", "356326", "356445", "356564", "356553", 
            "356542", "355267", "355256", "355245", "355234", "355237", "355223", "355226", 
            "355345", "355475", "355464", "355453", "355442", "355564", "355772", "369533", 
            "369522", "368444", "368433", "368422", "367355", "367344", "367333", "367322", 
            "367325", "367444", "366266", "366255", "366244", "366233", "366236", "366222", 
            "366225", "366344", "366552", "379532", "378324", "378443", "378432", "377235", 
            "377224", "377354", "377343", "377332", "973432", "972343", "972332", "864532", 
            "863443", "863432", "862354", "862343", "862332", "862443", "873442", "755632", 
            "754543", "754532", "753335", "753324", "753454", "753443", "753432", "753543", 
            "752246", "752365", "752354", "752343", "752332", "752335", "752454", "752443", 
            "752662", "765423", "764334", "764542", "763245", "763234", "763453", "763442", 
            "646732", "645524", "645643", "645632", "644435", "644424", "644554", "644543", 
            "644532", "644643", "643346", "643335", "643324", "643465", "643443", "643432", 
            "643435", "643554", "643543", "643762", "642246", "642235", "642224", "642227", 
            "642376", "642365", "642354", "642343", "642346", "642332", "642335", "642465", 
            "642454", "642443", "642554", "642673", "642662", "656523", "655434", "655423", 
            "655642", "654345", "654334", "654323", "654434", "654553", "654542", "653256", 
            "653245", "653234", "653223", "653226", "653345", "653334", "653464", "653453", 
            "653442", "666433", "666422", "665344", "665322", "665433", "664255", "664244", 
            "664233", "664222", "664225", "664344", "664333", "664552", "675224", "686223", 
            "697222", "537832", "536624", "536743", "536732", "535535", "535524", "535654", 
            "535643", "535632", "535743", "534446", "534435", "534424", "534565", "534543", 
            "534532", "534535", "534654", "534643", "534862", "533357", "533335", "533324", 
            "533327", "533476", "533465", "533443", "533446", "533432", "533435", "533565", 
            "533554", "533543", "533654", "533773", "533762", "532246", "532235", "532238", 
            "532224", "532227", "532387", "532376", "532365", "532354", "532343", "532346", 
            "532332", "532335", "532476", "532465", "532454", "532443", "532446", "532565", 
            "532554", "532684", "532673", "532662", "532773", "547623", "546534", "546523", 
            "546742", "545445", "545423", "545653", "545642", "544356", "544323", "544326", 
            "544445", "544564", "544553", "544542", "543267", "543256", "543245", "543234", 
            "543237", "543223", "543226", "543345", "543475", "543464", "543453", "543442", 
            "543445", "543564", "543772", "556444", "556422", "555355", "555322", "555325", 
            "555444", "555652", "554266", "554255", "554244", "554233", "554236", "554222", 
            "554225", "554344", "554563", "554552", "566324", "566443", "566432", "565235", 
            "565224", "565354", "565343", "565332", "577323", "576234", "576223", "588322", 
            "587233", "587222", "427724", "427843", "427832", "426635", "426624", "426754", 
            "426743", "426732", "426843", "425546", "425535", "425524", "425665", "425654", 
            "425643", "425632", "425635", "425754", "425743", "425962", "424446", "424435", 
            "424424", "424427", "424576", "424565", "424554", "424543", "424546", "424532", 
            "424535", "424665", "424654", "424643", "424754", "424873", "424862", "423357", 
            "423346", "423335", "423338", "423324", "423327", "423487", "423476", "423465", 
            "423454", "423457", "423443", "423446", "423432", "423435", "423576", "423565", 
            "423554", "423543", "423546", "423665", "423654", "423784", "423773", "423762", 
            "423873", "422246", "422249", "422235", "422238", "422224", "422227", "422387", 
            "422376", "422365", "422354", "422343", "422346", "422335", "422487", "422476", 
            "422465", "422454", "422457", "422443", "422446", "422576", "422565", "422554", 
            "422695", "422684", "422673", "422662", "422665", "422784", "422773", "437634", 
            "437623", "437842", "436545", "436534", "436523", "436753", "436742", "435456", 
            "435445", "435434", "435423", "435426", "435545", "435664", "435653", "435642", 
            "435753", "434356", "434345", "434334", "434337", "434323", "434326", "434445", 
            "434575", "434564", "434553", "434542", "434664", "434872", "433267", "433256", 
            "433245", "433248", "433234", "433237", "433223", "433226", "433345", "433486", 
            "433475", "433464", "433453", "433456", "433442", "433564", "433783", "433772", 
            "447544", "446455", "446444", "446433", "446422", "446425", "446544", "446752", 
            "445366", "445355", "445344", "445333", "445336", "445322", "445325", "445444", 
            "445663", "445652", "444266", "444255", "444244", "444247", "444233", "444236", 
            "444222", "444225", "444366", "444344", "444455", "444574", "444563", "444552", 
            "457424", "457543", "457532", "456335", "456324", "456454", "456443", "456432", 
            "455246", "455235", "455224", "455365", "455354", "455343", "455332", "455454", 
            "455662", "468423", "467334", "467323", "466245", "466234", "466223", "466453", 
            "466442", "479422", "478333", "478322", "477244", "477233", "477222", "964422", 
            "963333", "963322", "962244", "962233", "962222", "962333", "973332", "855522", 
            "854433", "854422", "853344", "853333", "853322", "853433", "852255", "852244", 
            "852233", "852222", "852344", "852333", "852552", "864432", "863343", "863332", 
            "746622", "745533", "745522", "744444", "744433", "744422", "744533", "743355", 
            "743333", "743322", "743325", "743444", "743433", "743652", "742266", "742255", 
            "742244", "742233", "742222", "742225", "742355", "742344", "742333", "742444", 
            "742563", "742552", "755532", "754443", "754432", "753224", "753354", "753343", 
            "753332", "764442", "637722", "636633", "636622", "635544", "635522", "635633", 
            "634455", "634433", "634422", "634425", "634544", "634533", "634752", "633366", 
            "633355", "633333", "633336", "633322", "633325", "633455", "633444", "633433", 
            "633544", "633663", "633652", "632277", "632266", "632255", "632244", "632247", 
            "632233", "632236", "632222", "632225", "632366", "632355", "632344", "632333", 
            "632336", "632455", "632444", "632574", "632563", "632552", "632663", "646632", 
            "645424", "645543", "645532", "644335", "644324", "644454", "644432", "643246", 
            "643235", "643224", "643365", "643354", "643343", "643332", "643454", "643662", 
            "656423", "655334", "655323", "655542", "654245", "654234", "654223", "654453", 
            "654442", "666333", "666322", "665244", "665233", "665222", "665333", "527733", 
            "527722", "526644", "526633", "526622", "526733", "525555", "525544", "525533", 
            "525522", "525525", "525644", "525633", "525852", "524466", "524455", "524444", 
            "524433", "524436", "524422", "524425", "524555", "524544", "524533", "524644", 
            "524763", "524752", "523377", "523366", "523355", "523344", "523333", "523336", 
            "523322", "523325", "523466", "523455", "523444", "523433", "523436", "523555", 
            "523544", "523674", "523663", "523652", "523763", "522277", "522266", "522255", 
            "522244", "522233", "522236", "522225", "522377", "522366", "522355", "522344", 
            "522347", "522333", "522336", "522466", "522455", "522444", "522585", "522574", 
            "522563", "522552", "522555", "522674", "522663", "537732", "536524", "536643", 
            "536632", "535435", "535424", "535554", "535543", "535532", "534346", "534335", 
            "534324", "534465", "534454", "534443", "534432", "534554", "534762", "533257", 
            "533246", "533235", "533224", "533227", "533376", "533365", "533354", "533343", 
            "533346", "533332", "533454", "533673", "533662", "547523", "546434", "546423", 
            "546642", "545345", "545334", "545323", "545434", "545553", "545542", "544256", 
            "544245", "544234", "544223", "544226", "544345", "544334", "544464", "544453", 
            "544442", "557433", "556344", "556333", "556322", "556433", "555255", "555244", 
            "555233", "555222", "555225", "555344", "555333", "555552", "566224", "566343", 
            "566332", "577223", "953323", "952234", "952223", "952442", "964322", "963233", 
            "963222", "844423", "843334", "843323", "843542", "842245", "842234", "842223", 
            "842334", "842453", "842442", "855422", "854333", "854322", "853244", "853233", 
            "853222", "864332", "735523", "734434", "734423", "734642", "733345", "733323", 
            "733434", "733553", "733542", "732256", "732245", "732234", "732223", "732226", 
            "732345", "732334", "732464", "732453", "732442", "732553", "746522", "745433", 
            "745422", "744344", "744322", "743255", "743244", "743233", "743222", "743225", 
            "743344", "743552", "755432", "754224", "754343", "754332", "626623", "625534", 
            "625523", "625742", "624445", "624434", "624423", "624534", "624653", "624642", 
            "623356", "623345", "623334", "623323", "623326", "623445", "623434", "623564", 
            "623553", "623542", "623653", "622267", "622256", "622245", "622234", "622237", 
            "622223", "622226", "622356", "622345", "622334", "622475", "622464", "622453", 
            "622442", "622445", "622564", "622553", "622772", "637622", "636533", "636522", 
            "635444", "635433", "635422", "635533", "634355", "634344", "634333", "634322", 
            "634325", "634444", "634652", "633266", "633255", "633244", "633233", "633236", 
            "633222", "633225", "633344", "633563", "633552", "646532", "645324", "645443", 
            "645432", "644235", "644224", "644354", "644343", "644332", "644443", "656323", 
            "655234", "655223", "655442", "666233", "666222", "943432", "942224", "942343", 
            "942332", "953223", "964222", "834532", "833324", "833443", "833432", "832235", 
            "832224", "832354", "832343", "832332", "832443", "844323", "843234", "843223", 
            "843442", "855322", "854233", "854222", "725632", "724424", "724543", "724532", 
            "723335", "723324", "723454", "723443", "723432", "723543", "722246", "722235", 
            "722224", "722365", "722354", "722343", "722332", "722335", "722454", "722443", 
            "735423", "734334", "734323", "734542", "733245", "733234", "733223", "733334", 
            "733453", "733442", "746422", "745333", "745322", "744244", "744233", "744222", 
            "744333", "755332"};

        private int[] SYMBOL_TABLE = {0x1025e, 0x1027a, 0x1029e,
            0x102bc, 0x102f2, 0x102f4, 0x1032e, 0x1034e, 0x1035c, 0x10396,
            0x103a6, 0x103ac, 0x10422, 0x10428, 0x10436, 0x10442, 0x10444,
            0x10448, 0x10450, 0x1045e, 0x10466, 0x1046c, 0x1047a, 0x10482,
            0x1049e, 0x104a0, 0x104bc, 0x104c6, 0x104d8, 0x104ee, 0x104f2,
            0x104f4, 0x10504, 0x10508, 0x10510, 0x1051e, 0x10520, 0x1053c,
            0x10540, 0x10578, 0x10586, 0x1058c, 0x10598, 0x105b0, 0x105be,
            0x105ce, 0x105dc, 0x105e2, 0x105e4, 0x105e8, 0x105f6, 0x1062e,
            0x1064e, 0x1065c, 0x1068e, 0x1069c, 0x106b8, 0x106de, 0x106fa,
            0x10716, 0x10726, 0x1072c, 0x10746, 0x1074c, 0x10758, 0x1076e,
            0x10792, 0x10794, 0x107a2, 0x107a4, 0x107a8, 0x107b6, 0x10822,
            0x10828, 0x10842, 0x10848, 0x10850, 0x1085e, 0x10866, 0x1086c,
            0x1087a, 0x10882, 0x10884, 0x10890, 0x1089e, 0x108a0, 0x108bc,
            0x108c6, 0x108cc, 0x108d8, 0x108ee, 0x108f2, 0x108f4, 0x10902,
            0x10908, 0x1091e, 0x10920, 0x1093c, 0x10940, 0x10978, 0x10986,
            0x10998, 0x109b0, 0x109be, 0x109ce, 0x109dc, 0x109e2, 0x109e4,
            0x109e8, 0x109f6, 0x10a08, 0x10a10, 0x10a1e, 0x10a20, 0x10a3c,
            0x10a40, 0x10a78, 0x10af0, 0x10b06, 0x10b0c, 0x10b18, 0x10b30,
            0x10b3e, 0x10b60, 0x10b7c, 0x10b8e, 0x10b9c, 0x10bb8, 0x10bc2,
            0x10bc4, 0x10bc8, 0x10bd0, 0x10bde, 0x10be6, 0x10bec, 0x10c2e,
            0x10c4e, 0x10c5c, 0x10c62, 0x10c64, 0x10c68, 0x10c76, 0x10c8e,
            0x10c9c, 0x10cb8, 0x10cc2, 0x10cc4, 0x10cc8, 0x10cd0, 0x10cde,
            0x10ce6, 0x10cec, 0x10cfa, 0x10d0e, 0x10d1c, 0x10d38, 0x10d70,
            0x10d7e, 0x10d82, 0x10d84, 0x10d88, 0x10d90, 0x10d9e, 0x10da0,
            0x10dbc, 0x10dc6, 0x10dcc, 0x10dd8, 0x10dee, 0x10df2, 0x10df4,
            0x10e16, 0x10e26, 0x10e2c, 0x10e46, 0x10e58, 0x10e6e, 0x10e86,
            0x10e8c, 0x10e98, 0x10eb0, 0x10ebe, 0x10ece, 0x10edc, 0x10f0a,
            0x10f12, 0x10f14, 0x10f22, 0x10f28, 0x10f36, 0x10f42, 0x10f44,
            0x10f48, 0x10f50, 0x10f5e, 0x10f66, 0x10f6c, 0x10fb2, 0x10fb4,
            0x11022, 0x11028, 0x11042, 0x11048, 0x11050, 0x1105e, 0x1107a,
            0x11082, 0x11084, 0x11090, 0x1109e, 0x110a0, 0x110bc, 0x110c6,
            0x110cc, 0x110d8, 0x110ee, 0x110f2, 0x110f4, 0x11102, 0x1111e,
            0x11120, 0x1113c, 0x11140, 0x11178, 0x11186, 0x11198, 0x111b0,
            0x111be, 0x111ce, 0x111dc, 0x111e2, 0x111e4, 0x111e8, 0x111f6,
            0x11208, 0x1121e, 0x11220, 0x11278, 0x112f0, 0x1130c, 0x11330,
            0x1133e, 0x11360, 0x1137c, 0x1138e, 0x1139c, 0x113b8, 0x113c2,
            0x113c8, 0x113d0, 0x113de, 0x113e6, 0x113ec, 0x11408, 0x11410,
            0x1141e, 0x11420, 0x1143c, 0x11440, 0x11478, 0x114f0, 0x115e0,
            0x1160c, 0x11618, 0x11630, 0x1163e, 0x11660, 0x1167c, 0x116c0,
            0x116f8, 0x1171c, 0x11738, 0x11770, 0x1177e, 0x11782, 0x11784,
            0x11788, 0x11790, 0x1179e, 0x117a0, 0x117bc, 0x117c6, 0x117cc,
            0x117d8, 0x117ee, 0x1182e, 0x11834, 0x1184e, 0x1185c, 0x11862,
            0x11864, 0x11868, 0x11876, 0x1188e, 0x1189c, 0x118b8, 0x118c2,
            0x118c8, 0x118d0, 0x118de, 0x118e6, 0x118ec, 0x118fa, 0x1190e,
            0x1191c, 0x11938, 0x11970, 0x1197e, 0x11982, 0x11984, 0x11990,
            0x1199e, 0x119a0, 0x119bc, 0x119c6, 0x119cc, 0x119d8, 0x119ee,
            0x119f2, 0x119f4, 0x11a0e, 0x11a1c, 0x11a38, 0x11a70, 0x11a7e,
            0x11ae0, 0x11afc, 0x11b08, 0x11b10, 0x11b1e, 0x11b20, 0x11b3c,
            0x11b40, 0x11b78, 0x11b8c, 0x11b98, 0x11bb0, 0x11bbe, 0x11bce,
            0x11bdc, 0x11be2, 0x11be4, 0x11be8, 0x11bf6, 0x11c16, 0x11c26,
            0x11c2c, 0x11c46, 0x11c4c, 0x11c58, 0x11c6e, 0x11c86, 0x11c98,
            0x11cb0, 0x11cbe, 0x11cce, 0x11cdc, 0x11ce2, 0x11ce4, 0x11ce8,
            0x11cf6, 0x11d06, 0x11d0c, 0x11d18, 0x11d30, 0x11d3e, 0x11d60,
            0x11d7c, 0x11d8e, 0x11d9c, 0x11db8, 0x11dc4, 0x11dc8, 0x11dd0,
            0x11dde, 0x11de6, 0x11dec, 0x11dfa, 0x11e0a, 0x11e12, 0x11e14,
            0x11e22, 0x11e24, 0x11e28, 0x11e36, 0x11e42, 0x11e44, 0x11e50,
            0x11e5e, 0x11e66, 0x11e6c, 0x11e82, 0x11e84, 0x11e88, 0x11e90,
            0x11e9e, 0x11ea0, 0x11ebc, 0x11ec6, 0x11ecc, 0x11ed8, 0x11eee,
            0x11f1a, 0x11f2e, 0x11f32, 0x11f34, 0x11f4e, 0x11f5c, 0x11f62,
            0x11f64, 0x11f68, 0x11f76, 0x12048, 0x1205e, 0x12082, 0x12084,
            0x12090, 0x1209e, 0x120a0, 0x120bc, 0x120d8, 0x120f2, 0x120f4,
            0x12108, 0x1211e, 0x12120, 0x1213c, 0x12140, 0x12178, 0x12186,
            0x12198, 0x121b0, 0x121be, 0x121e2, 0x121e4, 0x121e8, 0x121f6,
            0x12204, 0x12210, 0x1221e, 0x12220, 0x12278, 0x122f0, 0x12306,
            0x1230c, 0x12330, 0x1233e, 0x12360, 0x1237c, 0x1238e, 0x1239c,
            0x123b8, 0x123c2, 0x123c8, 0x123d0, 0x123e6, 0x123ec, 0x1241e,
            0x12420, 0x1243c, 0x124f0, 0x125e0, 0x12618, 0x1263e, 0x12660,
            0x1267c, 0x126c0, 0x126f8, 0x12738, 0x12770, 0x1277e, 0x12782,
            0x12784, 0x12790, 0x1279e, 0x127a0, 0x127bc, 0x127c6, 0x127cc,
            0x127d8, 0x127ee, 0x12820, 0x1283c, 0x12840, 0x12878, 0x128f0,
            0x129e0, 0x12bc0, 0x12c18, 0x12c30, 0x12c3e, 0x12c60, 0x12c7c,
            0x12cc0, 0x12cf8, 0x12df0, 0x12e1c, 0x12e38, 0x12e70, 0x12e7e,
            0x12ee0, 0x12efc, 0x12f04, 0x12f08, 0x12f10, 0x12f20, 0x12f3c,
            0x12f40, 0x12f78, 0x12f86, 0x12f8c, 0x12f98, 0x12fb0, 0x12fbe,
            0x12fce, 0x12fdc, 0x1302e, 0x1304e, 0x1305c, 0x13062, 0x13068,
            0x1308e, 0x1309c, 0x130b8, 0x130c2, 0x130c8, 0x130d0, 0x130de,
            0x130ec, 0x130fa, 0x1310e, 0x13138, 0x13170, 0x1317e, 0x13182,
            0x13184, 0x13190, 0x1319e, 0x131a0, 0x131bc, 0x131c6, 0x131cc,
            0x131d8, 0x131f2, 0x131f4, 0x1320e, 0x1321c, 0x13270, 0x1327e,
            0x132e0, 0x132fc, 0x13308, 0x1331e, 0x13320, 0x1333c, 0x13340,
            0x13378, 0x13386, 0x13398, 0x133b0, 0x133be, 0x133ce, 0x133dc,
            0x133e2, 0x133e4, 0x133e8, 0x133f6, 0x1340e, 0x1341c, 0x13438,
            0x13470, 0x1347e, 0x134e0, 0x134fc, 0x135c0, 0x135f8, 0x13608,
            0x13610, 0x1361e, 0x13620, 0x1363c, 0x13640, 0x13678, 0x136f0,
            0x1370c, 0x13718, 0x13730, 0x1373e, 0x13760, 0x1377c, 0x1379c,
            0x137b8, 0x137c2, 0x137c4, 0x137c8, 0x137d0, 0x137de, 0x137e6,
            0x137ec, 0x13816, 0x13826, 0x1382c, 0x13846, 0x1384c, 0x13858,
            0x1386e, 0x13874, 0x13886, 0x13898, 0x138b0, 0x138be, 0x138ce,
            0x138dc, 0x138e2, 0x138e4, 0x138e8, 0x13906, 0x1390c, 0x13930,
            0x1393e, 0x13960, 0x1397c, 0x1398e, 0x1399c, 0x139b8, 0x139c8,
            0x139d0, 0x139de, 0x139e6, 0x139ec, 0x139fa, 0x13a06, 0x13a0c,
            0x13a18, 0x13a30, 0x13a3e, 0x13a60, 0x13a7c, 0x13ac0, 0x13af8,
            0x13b0e, 0x13b1c, 0x13b38, 0x13b70, 0x13b7e, 0x13b88, 0x13b90,
            0x13b9e, 0x13ba0, 0x13bbc, 0x13bcc, 0x13bd8, 0x13bee, 0x13bf2,
            0x13bf4, 0x13c12, 0x13c14, 0x13c22, 0x13c24, 0x13c28, 0x13c36,
            0x13c42, 0x13c48, 0x13c50, 0x13c5e, 0x13c66, 0x13c6c, 0x13c82,
            0x13c84, 0x13c90, 0x13c9e, 0x13ca0, 0x13cbc, 0x13cc6, 0x13ccc,
            0x13cd8, 0x13cee, 0x13d02, 0x13d04, 0x13d08, 0x13d10, 0x13d1e,
            0x13d20, 0x13d3c, 0x13d40, 0x13d78, 0x13d86, 0x13d8c, 0x13d98,
            0x13db0, 0x13dbe, 0x13dce, 0x13ddc, 0x13de4, 0x13de8, 0x13df6,
            0x13e1a, 0x13e2e, 0x13e32, 0x13e34, 0x13e4e, 0x13e5c, 0x13e62,
            0x13e64, 0x13e68, 0x13e76, 0x13e8e, 0x13e9c, 0x13eb8, 0x13ec2,
            0x13ec4, 0x13ec8, 0x13ed0, 0x13ede, 0x13ee6, 0x13eec, 0x13f26,
            0x13f2c, 0x13f3a, 0x13f46, 0x13f4c, 0x13f58, 0x13f6e, 0x13f72,
            0x13f74, 0x14082, 0x1409e, 0x140a0, 0x140bc, 0x14104, 0x14108,
            0x14110, 0x1411e, 0x14120, 0x1413c, 0x14140, 0x14178, 0x1418c,
            0x14198, 0x141b0, 0x141be, 0x141e2, 0x141e4, 0x141e8, 0x14208,
            0x14210, 0x1421e, 0x14220, 0x1423c, 0x14240, 0x14278, 0x142f0,
            0x14306, 0x1430c, 0x14318, 0x14330, 0x1433e, 0x14360, 0x1437c,
            0x1438e, 0x143c2, 0x143c4, 0x143c8, 0x143d0, 0x143e6, 0x143ec,
            0x14408, 0x14410, 0x1441e, 0x14420, 0x1443c, 0x14440, 0x14478,
            0x144f0, 0x145e0, 0x1460c, 0x14618, 0x14630, 0x1463e, 0x14660,
            0x1467c, 0x146c0, 0x146f8, 0x1471c, 0x14738, 0x14770, 0x1477e,
            0x14782, 0x14784, 0x14788, 0x14790, 0x147a0, 0x147bc, 0x147c6,
            0x147cc, 0x147d8, 0x147ee, 0x14810, 0x14820, 0x1483c, 0x14840,
            0x14878, 0x148f0, 0x149e0, 0x14bc0, 0x14c30, 0x14c3e, 0x14c60,
            0x14c7c, 0x14cc0, 0x14cf8, 0x14df0, 0x14e38, 0x14e70, 0x14e7e,
            0x14ee0, 0x14efc, 0x14f04, 0x14f08, 0x14f10, 0x14f1e, 0x14f20,
            0x14f3c, 0x14f40, 0x14f78, 0x14f86, 0x14f8c, 0x14f98, 0x14fb0,
            0x14fce, 0x14fdc, 0x15020, 0x15040, 0x15078, 0x150f0, 0x151e0,
            0x153c0, 0x15860, 0x1587c, 0x158c0, 0x158f8, 0x159f0, 0x15be0,
            0x15c70, 0x15c7e, 0x15ce0, 0x15cfc, 0x15dc0, 0x15df8, 0x15e08,
            0x15e10, 0x15e20, 0x15e40, 0x15e78, 0x15ef0, 0x15f0c, 0x15f18,
            0x15f30, 0x15f60, 0x15f7c, 0x15f8e, 0x15f9c, 0x15fb8, 0x1604e,
            0x1605c, 0x1608e, 0x1609c, 0x160b8, 0x160c2, 0x160c4, 0x160c8,
            0x160de, 0x1610e, 0x1611c, 0x16138, 0x16170, 0x1617e, 0x16184,
            0x16188, 0x16190, 0x1619e, 0x161a0, 0x161bc, 0x161c6, 0x161cc,
            0x161d8, 0x161f2, 0x161f4, 0x1620e, 0x1621c, 0x16238, 0x16270,
            0x1627e, 0x162e0, 0x162fc, 0x16304, 0x16308, 0x16310, 0x1631e,
            0x16320, 0x1633c, 0x16340, 0x16378, 0x16386, 0x1638c, 0x16398,
            0x163b0, 0x163be, 0x163ce, 0x163dc, 0x163e2, 0x163e4, 0x163e8,
            0x163f6, 0x1640e, 0x1641c, 0x16438, 0x16470, 0x1647e, 0x164e0,
            0x164fc, 0x165c0, 0x165f8, 0x16610, 0x1661e, 0x16620, 0x1663c,
            0x16640, 0x16678, 0x166f0, 0x16718, 0x16730, 0x1673e, 0x16760,
            0x1677c, 0x1678e, 0x1679c, 0x167b8, 0x167c2, 0x167c4, 0x167c8,
            0x167d0, 0x167de, 0x167e6, 0x167ec, 0x1681c, 0x16838, 0x16870,
            0x168e0, 0x168fc, 0x169c0, 0x169f8, 0x16bf0, 0x16c10, 0x16c1e,
            0x16c20, 0x16c3c, 0x16c40, 0x16c78, 0x16cf0, 0x16de0, 0x16e18,
            0x16e30, 0x16e3e, 0x16e60, 0x16e7c, 0x16ec0, 0x16ef8, 0x16f1c,
            0x16f38, 0x16f70, 0x16f7e, 0x16f84, 0x16f88, 0x16f90, 0x16f9e,
            0x16fa0, 0x16fbc, 0x16fc6, 0x16fcc, 0x16fd8, 0x17026, 0x1702c,
            0x17046, 0x1704c, 0x17058, 0x1706e, 0x17086, 0x1708c, 0x17098,
            0x170b0, 0x170be, 0x170ce, 0x170dc, 0x170e8, 0x17106, 0x1710c,
            0x17118, 0x17130, 0x1713e, 0x17160, 0x1717c, 0x1718e, 0x1719c,
            0x171b8, 0x171c2, 0x171c4, 0x171c8, 0x171d0, 0x171de, 0x171e6,
            0x171ec, 0x171fa, 0x17206, 0x1720c, 0x17218, 0x17230, 0x1723e,
            0x17260, 0x1727c, 0x172c0, 0x172f8, 0x1730e, 0x1731c, 0x17338,
            0x17370, 0x1737e, 0x17388, 0x17390, 0x1739e, 0x173a0, 0x173bc,
            0x173cc, 0x173d8, 0x173ee, 0x173f2, 0x173f4, 0x1740c, 0x17418,
            0x17430, 0x1743e, 0x17460, 0x1747c, 0x174c0, 0x174f8, 0x175f0,
            0x1760e, 0x1761c, 0x17638, 0x17670, 0x1767e, 0x176e0, 0x176fc,
            0x17708, 0x17710, 0x1771e, 0x17720, 0x1773c, 0x17740, 0x17778,
            0x17798, 0x177b0, 0x177be, 0x177dc, 0x177e2, 0x177e4, 0x177e8,
            0x17822, 0x17824, 0x17828, 0x17836, 0x17842, 0x17844, 0x17848,
            0x17850, 0x1785e, 0x17866, 0x1786c, 0x17882, 0x17884, 0x17888,
            0x17890, 0x1789e, 0x178a0, 0x178bc, 0x178c6, 0x178cc, 0x178d8,
            0x178ee, 0x178f2, 0x178f4, 0x17902, 0x17904, 0x17908, 0x17910,
            0x1791e, 0x17920, 0x1793c, 0x17940, 0x17978, 0x17986, 0x1798c,
            0x17998, 0x179b0, 0x179be, 0x179ce, 0x179dc, 0x179e2, 0x179e4,
            0x179e8, 0x179f6, 0x17a04, 0x17a08, 0x17a10, 0x17a1e, 0x17a20,
            0x17a3c, 0x17a40, 0x17a78, 0x17af0, 0x17b06, 0x17b0c, 0x17b18,
            0x17b30, 0x17b3e, 0x17b60, 0x17b7c, 0x17b8e, 0x17b9c, 0x17bb8,
            0x17bc4, 0x17bc8, 0x17bd0, 0x17bde, 0x17be6, 0x17bec, 0x17c2e,
            0x17c32, 0x17c34, 0x17c4e, 0x17c5c, 0x17c62, 0x17c64, 0x17c68,
            0x17c76, 0x17c8e, 0x17c9c, 0x17cb8, 0x17cc2, 0x17cc4, 0x17cc8,
            0x17cd0, 0x17cde, 0x17ce6, 0x17cec, 0x17d0e, 0x17d1c, 0x17d38,
            0x17d70, 0x17d82, 0x17d84, 0x17d88, 0x17d90, 0x17d9e, 0x17da0,
            0x17dbc, 0x17dc6, 0x17dcc, 0x17dd8, 0x17dee, 0x17e26, 0x17e2c,
            0x17e3a, 0x17e46, 0x17e4c, 0x17e58, 0x17e6e, 0x17e72, 0x17e74,
            0x17e86, 0x17e8c, 0x17e98, 0x17eb0, 0x17ece, 0x17edc, 0x17ee2,
            0x17ee4, 0x17ee8, 0x17ef6, 0x1813a, 0x18172, 0x18174, 0x18216,
            0x18226, 0x1823a, 0x1824c, 0x18258, 0x1826e, 0x18272, 0x18274,
            0x18298, 0x182be, 0x182e2, 0x182e4, 0x182e8, 0x182f6, 0x1835e,
            0x1837a, 0x183ae, 0x183d6, 0x18416, 0x18426, 0x1842c, 0x1843a,
            0x18446, 0x18458, 0x1846e, 0x18472, 0x18474, 0x18486, 0x184b0,
            0x184be, 0x184ce, 0x184dc, 0x184e2, 0x184e4, 0x184e8, 0x184f6,
            0x18506, 0x1850c, 0x18518, 0x18530, 0x1853e, 0x18560, 0x1857c,
            0x1858e, 0x1859c, 0x185b8, 0x185c2, 0x185c4, 0x185c8, 0x185d0,
            0x185de, 0x185e6, 0x185ec, 0x185fa, 0x18612, 0x18614, 0x18622,
            0x18628, 0x18636, 0x18642, 0x18650, 0x1865e, 0x1867a, 0x18682,
            0x18684, 0x18688, 0x18690, 0x1869e, 0x186a0, 0x186bc, 0x186c6,
            0x186cc, 0x186d8, 0x186ee, 0x186f2, 0x186f4, 0x1872e, 0x1874e,
            0x1875c, 0x18796, 0x187a6, 0x187ac, 0x187d2, 0x187d4, 0x18826,
            0x1882c, 0x1883a, 0x18846, 0x1884c, 0x18858, 0x1886e, 0x18872,
            0x18874, 0x18886, 0x18898, 0x188b0, 0x188be, 0x188ce, 0x188dc,
            0x188e2, 0x188e4, 0x188e8, 0x188f6, 0x1890c, 0x18930, 0x1893e,
            0x18960, 0x1897c, 0x1898e, 0x189b8, 0x189c2, 0x189c8, 0x189d0,
            0x189de, 0x189e6, 0x189ec, 0x189fa, 0x18a18, 0x18a30, 0x18a3e,
            0x18a60, 0x18a7c, 0x18ac0, 0x18af8, 0x18b1c, 0x18b38, 0x18b70,
            0x18b7e, 0x18b82, 0x18b84, 0x18b88, 0x18b90, 0x18b9e, 0x18ba0,
            0x18bbc, 0x18bc6, 0x18bcc, 0x18bd8, 0x18bee, 0x18bf2, 0x18bf4,
            0x18c22, 0x18c24, 0x18c28, 0x18c36, 0x18c42, 0x18c48, 0x18c50,
            0x18c5e, 0x18c66, 0x18c7a, 0x18c82, 0x18c84, 0x18c90, 0x18c9e,
            0x18ca0, 0x18cbc, 0x18ccc, 0x18cf2, 0x18cf4, 0x18d04, 0x18d08,
            0x18d10, 0x18d1e, 0x18d20, 0x18d3c, 0x18d40, 0x18d78, 0x18d86,
            0x18d98, 0x18dce, 0x18de2, 0x18de4, 0x18de8, 0x18e2e, 0x18e32,
            0x18e34, 0x18e4e, 0x18e5c, 0x18e62, 0x18e64, 0x18e68, 0x18e8e,
            0x18e9c, 0x18eb8, 0x18ec2, 0x18ec4, 0x18ec8, 0x18ed0, 0x18efa,
            0x18f16, 0x18f26, 0x18f2c, 0x18f46, 0x18f4c, 0x18f58, 0x18f6e,
            0x18f8a, 0x18f92, 0x18f94, 0x18fa2, 0x18fa4, 0x18fa8, 0x18fb6,
            0x1902c, 0x1903a, 0x19046, 0x1904c, 0x19058, 0x19072, 0x19074,
            0x19086, 0x19098, 0x190b0, 0x190be, 0x190ce, 0x190dc, 0x190e2,
            0x190e8, 0x190f6, 0x19106, 0x1910c, 0x19130, 0x1913e, 0x19160,
            0x1917c, 0x1918e, 0x1919c, 0x191b8, 0x191c2, 0x191c8, 0x191d0,
            0x191de, 0x191e6, 0x191ec, 0x191fa, 0x19218, 0x1923e, 0x19260,
            0x1927c, 0x192c0, 0x192f8, 0x19338, 0x19370, 0x1937e, 0x19382,
            0x19384, 0x19390, 0x1939e, 0x193a0, 0x193bc, 0x193c6, 0x193cc,
            0x193d8, 0x193ee, 0x193f2, 0x193f4, 0x19430, 0x1943e, 0x19460,
            0x1947c, 0x194c0, 0x194f8, 0x195f0, 0x19638, 0x19670, 0x1967e,
            0x196e0, 0x196fc, 0x19702, 0x19704, 0x19708, 0x19710, 0x19720,
            0x1973c, 0x19740, 0x19778, 0x19786, 0x1978c, 0x19798, 0x197b0,
            0x197be, 0x197ce, 0x197dc, 0x197e2, 0x197e4, 0x197e8, 0x19822,
            0x19824, 0x19842, 0x19848, 0x19850, 0x1985e, 0x19866, 0x1987a,
            0x19882, 0x19884, 0x19890, 0x1989e, 0x198a0, 0x198bc, 0x198cc,
            0x198f2, 0x198f4, 0x19902, 0x19908, 0x1991e, 0x19920, 0x1993c,
            0x19940, 0x19978, 0x19986, 0x19998, 0x199ce, 0x199e2, 0x199e4,
            0x199e8, 0x19a08, 0x19a10, 0x19a1e, 0x19a20, 0x19a3c, 0x19a40,
            0x19a78, 0x19af0, 0x19b18, 0x19b3e, 0x19b60, 0x19b9c, 0x19bc2,
            0x19bc4, 0x19bc8, 0x19bd0, 0x19be6, 0x19c2e, 0x19c34, 0x19c4e,
            0x19c5c, 0x19c62, 0x19c64, 0x19c68, 0x19c8e, 0x19c9c, 0x19cb8,
            0x19cc2, 0x19cc8, 0x19cd0, 0x19ce6, 0x19cfa, 0x19d0e, 0x19d1c,
            0x19d38, 0x19d70, 0x19d7e, 0x19d82, 0x19d84, 0x19d88, 0x19d90,
            0x19da0, 0x19dcc, 0x19df2, 0x19df4, 0x19e16, 0x19e26, 0x19e2c,
            0x19e46, 0x19e4c, 0x19e58, 0x19e74, 0x19e86, 0x19e8c, 0x19e98,
            0x19eb0, 0x19ebe, 0x19ece, 0x19ee2, 0x19ee4, 0x19ee8, 0x19f0a,
            0x19f12, 0x19f14, 0x19f22, 0x19f24, 0x19f28, 0x19f42, 0x19f44,
            0x19f48, 0x19f50, 0x19f5e, 0x19f6c, 0x19f9a, 0x19fae, 0x19fb2,
            0x19fb4, 0x1a046, 0x1a04c, 0x1a072, 0x1a074, 0x1a086, 0x1a08c,
            0x1a098, 0x1a0b0, 0x1a0be, 0x1a0e2, 0x1a0e4, 0x1a0e8, 0x1a0f6,
            0x1a106, 0x1a10c, 0x1a118, 0x1a130, 0x1a13e, 0x1a160, 0x1a17c,
            0x1a18e, 0x1a19c, 0x1a1b8, 0x1a1c2, 0x1a1c4, 0x1a1c8, 0x1a1d0,
            0x1a1de, 0x1a1e6, 0x1a1ec, 0x1a218, 0x1a230, 0x1a23e, 0x1a260,
            0x1a27c, 0x1a2c0, 0x1a2f8, 0x1a31c, 0x1a338, 0x1a370, 0x1a37e,
            0x1a382, 0x1a384, 0x1a388, 0x1a390, 0x1a39e, 0x1a3a0, 0x1a3bc,
            0x1a3c6, 0x1a3cc, 0x1a3d8, 0x1a3ee, 0x1a3f2, 0x1a3f4, 0x1a418,
            0x1a430, 0x1a43e, 0x1a460, 0x1a47c, 0x1a4c0, 0x1a4f8, 0x1a5f0,
            0x1a61c, 0x1a638, 0x1a670, 0x1a67e, 0x1a6e0, 0x1a6fc, 0x1a702,
            0x1a704, 0x1a708, 0x1a710, 0x1a71e, 0x1a720, 0x1a73c, 0x1a740,
            0x1a778, 0x1a786, 0x1a78c, 0x1a798, 0x1a7b0, 0x1a7be, 0x1a7ce,
            0x1a7dc, 0x1a7e2, 0x1a7e4, 0x1a7e8, 0x1a830, 0x1a860, 0x1a87c,
            0x1a8c0, 0x1a8f8, 0x1a9f0, 0x1abe0, 0x1ac70, 0x1ac7e, 0x1ace0,
            0x1acfc, 0x1adc0, 0x1adf8, 0x1ae04, 0x1ae08, 0x1ae10, 0x1ae20,
            0x1ae3c, 0x1ae40, 0x1ae78, 0x1aef0, 0x1af06, 0x1af0c, 0x1af18,
            0x1af30, 0x1af3e, 0x1af60, 0x1af7c, 0x1af8e, 0x1af9c, 0x1afb8,
            0x1afc4, 0x1afc8, 0x1afd0, 0x1afde, 0x1b042, 0x1b05e, 0x1b07a,
            0x1b082, 0x1b084, 0x1b088, 0x1b090, 0x1b09e, 0x1b0a0, 0x1b0bc,
            0x1b0cc, 0x1b0f2, 0x1b0f4, 0x1b102, 0x1b104, 0x1b108, 0x1b110,
            0x1b11e, 0x1b120, 0x1b13c, 0x1b140, 0x1b178, 0x1b186, 0x1b198,
            0x1b1ce, 0x1b1e2, 0x1b1e4, 0x1b1e8, 0x1b204, 0x1b208, 0x1b210,
            0x1b21e, 0x1b220, 0x1b23c, 0x1b240, 0x1b278, 0x1b2f0, 0x1b30c,
            0x1b33e, 0x1b360, 0x1b39c, 0x1b3c2, 0x1b3c4, 0x1b3c8, 0x1b3d0,
            0x1b3e6, 0x1b410, 0x1b41e, 0x1b420, 0x1b43c, 0x1b440, 0x1b478,
            0x1b4f0, 0x1b5e0, 0x1b618, 0x1b660, 0x1b67c, 0x1b6c0, 0x1b738,
            0x1b782, 0x1b784, 0x1b788, 0x1b790, 0x1b79e, 0x1b7a0, 0x1b7cc,
            0x1b82e, 0x1b84e, 0x1b85c, 0x1b88e, 0x1b89c, 0x1b8b8, 0x1b8c2,
            0x1b8c4, 0x1b8c8, 0x1b8d0, 0x1b8e6, 0x1b8fa, 0x1b90e, 0x1b91c,
            0x1b938, 0x1b970, 0x1b97e, 0x1b982, 0x1b984, 0x1b988, 0x1b990,
            0x1b99e, 0x1b9a0, 0x1b9cc, 0x1b9f2, 0x1b9f4, 0x1ba0e, 0x1ba1c,
            0x1ba38, 0x1ba70, 0x1ba7e, 0x1bae0, 0x1bafc, 0x1bb08, 0x1bb10,
            0x1bb20, 0x1bb3c, 0x1bb40, 0x1bb98, 0x1bbce, 0x1bbe2, 0x1bbe4,
            0x1bbe8, 0x1bc16, 0x1bc26, 0x1bc2c, 0x1bc46, 0x1bc4c, 0x1bc58,
            0x1bc72, 0x1bc74, 0x1bc86, 0x1bc8c, 0x1bc98, 0x1bcb0, 0x1bcbe,
            0x1bcce, 0x1bce2, 0x1bce4, 0x1bce8, 0x1bd06, 0x1bd0c, 0x1bd18,
            0x1bd30, 0x1bd3e, 0x1bd60, 0x1bd7c, 0x1bd9c, 0x1bdc2, 0x1bdc4,
            0x1bdc8, 0x1bdd0, 0x1bde6, 0x1bdfa, 0x1be12, 0x1be14, 0x1be22,
            0x1be24, 0x1be28, 0x1be42, 0x1be44, 0x1be48, 0x1be50, 0x1be5e,
            0x1be66, 0x1be82, 0x1be84, 0x1be88, 0x1be90, 0x1be9e, 0x1bea0,
            0x1bebc, 0x1becc, 0x1bef4, 0x1bf1a, 0x1bf2e, 0x1bf32, 0x1bf34,
            0x1bf4e, 0x1bf5c, 0x1bf62, 0x1bf64, 0x1bf68, 0x1c09a, 0x1c0b2,
            0x1c0b4, 0x1c11a, 0x1c132, 0x1c134, 0x1c162, 0x1c164, 0x1c168,
            0x1c176, 0x1c1ba, 0x1c21a, 0x1c232, 0x1c234, 0x1c24e, 0x1c25c,
            0x1c262, 0x1c264, 0x1c268, 0x1c276, 0x1c28e, 0x1c2c2, 0x1c2c4,
            0x1c2c8, 0x1c2d0, 0x1c2de, 0x1c2e6, 0x1c2ec, 0x1c2fa, 0x1c316,
            0x1c326, 0x1c33a, 0x1c346, 0x1c34c, 0x1c372, 0x1c374, 0x1c41a,
            0x1c42e, 0x1c432, 0x1c434, 0x1c44e, 0x1c45c, 0x1c462, 0x1c464,
            0x1c468, 0x1c476, 0x1c48e, 0x1c49c, 0x1c4b8, 0x1c4c2, 0x1c4c8,
            0x1c4d0, 0x1c4de, 0x1c4e6, 0x1c4ec, 0x1c4fa, 0x1c51c, 0x1c538,
            0x1c570, 0x1c57e, 0x1c582, 0x1c584, 0x1c588, 0x1c590, 0x1c59e,
            0x1c5a0, 0x1c5bc, 0x1c5c6, 0x1c5cc, 0x1c5d8, 0x1c5ee, 0x1c5f2,
            0x1c5f4, 0x1c616, 0x1c626, 0x1c62c, 0x1c63a, 0x1c646, 0x1c64c,
            0x1c658, 0x1c66e, 0x1c672, 0x1c674, 0x1c686, 0x1c68c, 0x1c698,
            0x1c6b0, 0x1c6be, 0x1c6ce, 0x1c6dc, 0x1c6e2, 0x1c6e4, 0x1c6e8,
            0x1c712, 0x1c714, 0x1c722, 0x1c728, 0x1c736, 0x1c742, 0x1c744,
            0x1c748, 0x1c750, 0x1c75e, 0x1c766, 0x1c76c, 0x1c77a, 0x1c7ae,
            0x1c7d6, 0x1c7ea, 0x1c81a, 0x1c82e, 0x1c832, 0x1c834, 0x1c84e,
            0x1c85c, 0x1c862, 0x1c864, 0x1c868, 0x1c876, 0x1c88e, 0x1c89c,
            0x1c8b8, 0x1c8c2, 0x1c8c8, 0x1c8d0, 0x1c8de, 0x1c8e6, 0x1c8ec,
            0x1c8fa, 0x1c90e, 0x1c938, 0x1c970, 0x1c97e, 0x1c982, 0x1c984,
            0x1c990, 0x1c99e, 0x1c9a0, 0x1c9bc, 0x1c9c6, 0x1c9cc, 0x1c9d8,
            0x1c9ee, 0x1c9f2, 0x1c9f4, 0x1ca38, 0x1ca70, 0x1ca7e, 0x1cae0,
            0x1cafc, 0x1cb02, 0x1cb04, 0x1cb08, 0x1cb10, 0x1cb20, 0x1cb3c,
            0x1cb40, 0x1cb78, 0x1cb86, 0x1cb8c, 0x1cb98, 0x1cbb0, 0x1cbbe,
            0x1cbce, 0x1cbdc, 0x1cbe2, 0x1cbe4, 0x1cbe8, 0x1cbf6, 0x1cc16,
            0x1cc26, 0x1cc2c, 0x1cc3a, 0x1cc46, 0x1cc58, 0x1cc72, 0x1cc74,
            0x1cc86, 0x1ccb0, 0x1ccbe, 0x1ccce, 0x1cce2, 0x1cce4, 0x1cce8,
            0x1cd06, 0x1cd0c, 0x1cd18, 0x1cd30, 0x1cd3e, 0x1cd60, 0x1cd7c,
            0x1cd9c, 0x1cdc2, 0x1cdc4, 0x1cdc8, 0x1cdd0, 0x1cdde, 0x1cde6,
            0x1cdfa, 0x1ce22, 0x1ce28, 0x1ce42, 0x1ce50, 0x1ce5e, 0x1ce66,
            0x1ce7a, 0x1ce82, 0x1ce84, 0x1ce88, 0x1ce90, 0x1ce9e, 0x1cea0,
            0x1cebc, 0x1cecc, 0x1cef2, 0x1cef4, 0x1cf2e, 0x1cf32, 0x1cf34,
            0x1cf4e, 0x1cf5c, 0x1cf62, 0x1cf64, 0x1cf68, 0x1cf96, 0x1cfa6,
            0x1cfac, 0x1cfca, 0x1cfd2, 0x1cfd4, 0x1d02e, 0x1d032, 0x1d034,
            0x1d04e, 0x1d05c, 0x1d062, 0x1d064, 0x1d068, 0x1d076, 0x1d08e,
            0x1d09c, 0x1d0b8, 0x1d0c2, 0x1d0c4, 0x1d0c8, 0x1d0d0, 0x1d0de,
            0x1d0e6, 0x1d0ec, 0x1d0fa, 0x1d11c, 0x1d138, 0x1d170, 0x1d17e,
            0x1d182, 0x1d184, 0x1d188, 0x1d190, 0x1d19e, 0x1d1a0, 0x1d1bc,
            0x1d1c6, 0x1d1cc, 0x1d1d8, 0x1d1ee, 0x1d1f2, 0x1d1f4, 0x1d21c,
            0x1d238, 0x1d270, 0x1d27e, 0x1d2e0, 0x1d2fc, 0x1d302, 0x1d304,
            0x1d308, 0x1d310, 0x1d31e, 0x1d320, 0x1d33c, 0x1d340, 0x1d378,
            0x1d386, 0x1d38c, 0x1d398, 0x1d3b0, 0x1d3be, 0x1d3ce, 0x1d3dc,
            0x1d3e2, 0x1d3e4, 0x1d3e8, 0x1d3f6, 0x1d470, 0x1d47e, 0x1d4e0,
            0x1d4fc, 0x1d5c0, 0x1d5f8, 0x1d604, 0x1d608, 0x1d610, 0x1d620,
            0x1d640, 0x1d678, 0x1d6f0, 0x1d706, 0x1d70c, 0x1d718, 0x1d730,
            0x1d73e, 0x1d760, 0x1d77c, 0x1d78e, 0x1d79c, 0x1d7b8, 0x1d7c2,
            0x1d7c4, 0x1d7c8, 0x1d7d0, 0x1d7de, 0x1d7e6, 0x1d7ec, 0x1d826,
            0x1d82c, 0x1d83a, 0x1d846, 0x1d84c, 0x1d858, 0x1d872, 0x1d874,
            0x1d886, 0x1d88c, 0x1d898, 0x1d8b0, 0x1d8be, 0x1d8ce, 0x1d8e2,
            0x1d8e4, 0x1d8e8, 0x1d8f6, 0x1d90c, 0x1d918, 0x1d930, 0x1d93e,
            0x1d960, 0x1d97c, 0x1d99c, 0x1d9c2, 0x1d9c4, 0x1d9c8, 0x1d9d0,
            0x1d9e6, 0x1d9fa, 0x1da0c, 0x1da18, 0x1da30, 0x1da3e, 0x1da60,
            0x1da7c, 0x1dac0, 0x1daf8, 0x1db38, 0x1db82, 0x1db84, 0x1db88,
            0x1db90, 0x1db9e, 0x1dba0, 0x1dbcc, 0x1dbf2, 0x1dbf4, 0x1dc22,
            0x1dc42, 0x1dc44, 0x1dc48, 0x1dc50, 0x1dc5e, 0x1dc66, 0x1dc7a,
            0x1dc82, 0x1dc84, 0x1dc88, 0x1dc90, 0x1dc9e, 0x1dca0, 0x1dcbc,
            0x1dccc, 0x1dcf2, 0x1dcf4, 0x1dd04, 0x1dd08, 0x1dd10, 0x1dd1e,
            0x1dd20, 0x1dd3c, 0x1dd40, 0x1dd78, 0x1dd86, 0x1dd98, 0x1ddce,
            0x1dde2, 0x1dde4, 0x1dde8, 0x1de2e, 0x1de32, 0x1de34, 0x1de4e,
            0x1de5c, 0x1de62, 0x1de64, 0x1de68, 0x1de8e, 0x1de9c, 0x1deb8,
            0x1dec2, 0x1dec4, 0x1dec8, 0x1ded0, 0x1dee6, 0x1defa, 0x1df16,
            0x1df26, 0x1df2c, 0x1df46, 0x1df4c, 0x1df58, 0x1df72, 0x1df74,
            0x1df8a, 0x1df92, 0x1df94, 0x1dfa2, 0x1dfa4, 0x1dfa8, 0x1e08a,
            0x1e092, 0x1e094, 0x1e0a2, 0x1e0a4, 0x1e0a8, 0x1e0b6, 0x1e0da,
            0x1e10a, 0x1e112, 0x1e114, 0x1e122, 0x1e124, 0x1e128, 0x1e136,
            0x1e142, 0x1e144, 0x1e148, 0x1e150, 0x1e166, 0x1e16c, 0x1e17a,
            0x1e19a, 0x1e1b2, 0x1e1b4, 0x1e20a, 0x1e212, 0x1e214, 0x1e222,
            0x1e224, 0x1e228, 0x1e236, 0x1e242, 0x1e248, 0x1e250, 0x1e25e,
            0x1e266, 0x1e26c, 0x1e27a, 0x1e282, 0x1e284, 0x1e288, 0x1e290,
            0x1e2a0, 0x1e2bc, 0x1e2c6, 0x1e2cc, 0x1e2d8, 0x1e2ee, 0x1e2f2,
            0x1e2f4, 0x1e31a, 0x1e332, 0x1e334, 0x1e35c, 0x1e362, 0x1e364,
            0x1e368, 0x1e3ba, 0x1e40a, 0x1e412, 0x1e414, 0x1e422, 0x1e428,
            0x1e436, 0x1e442, 0x1e448, 0x1e450, 0x1e45e, 0x1e466, 0x1e46c,
            0x1e47a, 0x1e482, 0x1e484, 0x1e490, 0x1e49e, 0x1e4a0, 0x1e4bc,
            0x1e4c6, 0x1e4cc, 0x1e4d8, 0x1e4ee, 0x1e4f2, 0x1e4f4, 0x1e502,
            0x1e504, 0x1e508, 0x1e510, 0x1e51e, 0x1e520, 0x1e53c, 0x1e540,
            0x1e578, 0x1e586, 0x1e58c, 0x1e598, 0x1e5b0, 0x1e5be, 0x1e5ce,
            0x1e5dc, 0x1e5e2, 0x1e5e4, 0x1e5e8, 0x1e5f6, 0x1e61a, 0x1e62e,
            0x1e632, 0x1e634, 0x1e64e, 0x1e65c, 0x1e662, 0x1e668, 0x1e68e,
            0x1e69c, 0x1e6b8, 0x1e6c2, 0x1e6c4, 0x1e6c8, 0x1e6d0, 0x1e6e6,
            0x1e6fa, 0x1e716, 0x1e726, 0x1e72c, 0x1e73a, 0x1e746, 0x1e74c,
            0x1e758, 0x1e772, 0x1e774, 0x1e792, 0x1e794, 0x1e7a2, 0x1e7a4,
            0x1e7a8, 0x1e7b6, 0x1e812, 0x1e814, 0x1e822, 0x1e824, 0x1e828,
            0x1e836, 0x1e842, 0x1e844, 0x1e848, 0x1e850, 0x1e85e, 0x1e866,
            0x1e86c, 0x1e87a, 0x1e882, 0x1e884, 0x1e888, 0x1e890, 0x1e89e,
            0x1e8a0, 0x1e8bc, 0x1e8c6, 0x1e8cc, 0x1e8d8, 0x1e8ee, 0x1e8f2,
            0x1e8f4, 0x1e902, 0x1e904, 0x1e908, 0x1e910, 0x1e920, 0x1e93c,
            0x1e940, 0x1e978, 0x1e986, 0x1e98c, 0x1e998, 0x1e9b0, 0x1e9be,
            0x1e9ce, 0x1e9dc, 0x1e9e2, 0x1e9e4, 0x1e9e8, 0x1e9f6, 0x1ea04,
            0x1ea08, 0x1ea10, 0x1ea20, 0x1ea40, 0x1ea78, 0x1eaf0, 0x1eb06,
            0x1eb0c, 0x1eb18, 0x1eb30, 0x1eb3e, 0x1eb60, 0x1eb7c, 0x1eb8e,
            0x1eb9c, 0x1ebb8, 0x1ebc2, 0x1ebc4, 0x1ebc8, 0x1ebd0, 0x1ebde,
            0x1ebe6, 0x1ebec, 0x1ec1a, 0x1ec2e, 0x1ec32, 0x1ec34, 0x1ec4e,
            0x1ec5c, 0x1ec62, 0x1ec64, 0x1ec68, 0x1ec8e, 0x1ec9c, 0x1ecb8,
            0x1ecc2, 0x1ecc4, 0x1ecc8, 0x1ecd0, 0x1ece6, 0x1ecfa, 0x1ed0e,
            0x1ed1c, 0x1ed38, 0x1ed70, 0x1ed7e, 0x1ed82, 0x1ed84, 0x1ed88,
            0x1ed90, 0x1ed9e, 0x1eda0, 0x1edcc, 0x1edf2, 0x1edf4, 0x1ee16,
            0x1ee26, 0x1ee2c, 0x1ee3a, 0x1ee46, 0x1ee4c, 0x1ee58, 0x1ee6e,
            0x1ee72, 0x1ee74, 0x1ee86, 0x1ee8c, 0x1ee98, 0x1eeb0, 0x1eebe,
            0x1eece, 0x1eedc, 0x1eee2, 0x1eee4, 0x1eee8, 0x1ef12, 0x1ef22,
            0x1ef24, 0x1ef28, 0x1ef36, 0x1ef42, 0x1ef44, 0x1ef48, 0x1ef50,
            0x1ef5e, 0x1ef66, 0x1ef6c, 0x1ef7a, 0x1efae, 0x1efb2, 0x1efb4,
            0x1efd6, 0x1f096, 0x1f0a6, 0x1f0ac, 0x1f0ba, 0x1f0ca, 0x1f0d2,
            0x1f0d4, 0x1f116, 0x1f126, 0x1f12c, 0x1f13a, 0x1f146, 0x1f14c,
            0x1f158, 0x1f16e, 0x1f172, 0x1f174, 0x1f18a, 0x1f192, 0x1f194,
            0x1f1a2, 0x1f1a4, 0x1f1a8, 0x1f1da, 0x1f216, 0x1f226, 0x1f22c,
            0x1f23a, 0x1f246, 0x1f258, 0x1f26e, 0x1f272, 0x1f274, 0x1f286,
            0x1f28c, 0x1f298, 0x1f2b0, 0x1f2be, 0x1f2ce, 0x1f2dc, 0x1f2e2,
            0x1f2e4, 0x1f2e8, 0x1f2f6, 0x1f30a, 0x1f312, 0x1f314, 0x1f322,
            0x1f328, 0x1f342, 0x1f344, 0x1f348, 0x1f350, 0x1f35e, 0x1f366,
            0x1f37a, 0x1f39a, 0x1f3ae, 0x1f3b2, 0x1f3b4, 0x1f416, 0x1f426,
            0x1f42c, 0x1f43a, 0x1f446, 0x1f44c, 0x1f458, 0x1f46e, 0x1f472,
            0x1f474, 0x1f486, 0x1f48c, 0x1f498, 0x1f4b0, 0x1f4be, 0x1f4ce,
            0x1f4dc, 0x1f4e2, 0x1f4e4, 0x1f4e8, 0x1f4f6, 0x1f506, 0x1f50c,
            0x1f518, 0x1f530, 0x1f53e, 0x1f560, 0x1f57c, 0x1f58e, 0x1f59c,
            0x1f5b8, 0x1f5c2, 0x1f5c4, 0x1f5c8, 0x1f5d0, 0x1f5de, 0x1f5e6,
            0x1f5ec, 0x1f5fa, 0x1f60a, 0x1f612, 0x1f614, 0x1f622, 0x1f624,
            0x1f628, 0x1f636, 0x1f642, 0x1f644, 0x1f648, 0x1f650, 0x1f65e,
            0x1f666, 0x1f67a, 0x1f682, 0x1f684, 0x1f688, 0x1f690, 0x1f69e,
            0x1f6a0, 0x1f6bc, 0x1f6cc, 0x1f6f2, 0x1f6f4, 0x1f71a, 0x1f72e,
            0x1f732, 0x1f734, 0x1f74e, 0x1f75c, 0x1f762, 0x1f764, 0x1f768,
            0x1f776, 0x1f796, 0x1f7a6, 0x1f7ac, 0x1f7ba, 0x1f7d2, 0x1f7d4,
            0x1f89a, 0x1f8ae, 0x1f8b2, 0x1f8b4, 0x1f8d6, 0x1f8ea, 0x1f91a,
            0x1f92e, 0x1f932, 0x1f934, 0x1f94e, 0x1f95c, 0x1f962, 0x1f964,
            0x1f968, 0x1f976, 0x1f996, 0x1f9a6, 0x1f9ac, 0x1f9ba, 0x1f9ca,
            0x1f9d2, 0x1f9d4, 0x1fa1a, 0x1fa2e, 0x1fa32, 0x1fa34, 0x1fa4e,
            0x1fa5c, 0x1fa62, 0x1fa64, 0x1fa68, 0x1fa76, 0x1fa8e, 0x1fa9c,
            0x1fab8, 0x1fac2, 0x1fac4, 0x1fac8, 0x1fad0, 0x1fade, 0x1fae6,
            0x1faec, 0x1fb16, 0x1fb26, 0x1fb2c, 0x1fb3a, 0x1fb46, 0x1fb4c,
            0x1fb58, 0x1fb6e, 0x1fb72, 0x1fb74, 0x1fb8a, 0x1fb92, 0x1fb94,
            0x1fba2, 0x1fba4, 0x1fba8, 0x1fbb6, 0x1fbda};

        private int k0lc;
        private int k3lc;
        private int k6lc;
        private int numOfRows;
        private int errorCorrection;
        private int numOfColumns;
        private BitMatrix image;


        /// <summary>
        /// Initializes a new instance of the <see cref="Detector2"/> class.
        /// </summary>
        /// <param name="image">The image.</param>
        public Detector2(BitMatrix image)
        {
            this.image = image;
            this.numOfRows = 0;
            this.errorCorrection = 0;
            this.numOfColumns = 0;
        }

        public DecoderResult Detect()
        {
            k0lc = -1;
            k3lc = -1;
            k6lc = -1;
            bool preScan = false;
            for (int y = 0; y < image.GetHeight(); y++)
            {
                Pdf417Line pdfLine = new Pdf417Line();
                ScanLineInitial(y, ref pdfLine);
                if (pdfLine.LeftColumnIndicator != null)
                {
                    ExtractColumnIndicator(pdfLine.LeftColumnIndicator, true);
                }
                if (pdfLine.RightColumnIndicator != null)
                {
                    ExtractColumnIndicator(pdfLine.RightColumnIndicator, false);
                }
                if (k0lc >= 0 && k3lc >= 0 && k6lc >= 0)
                {
                    numOfRows = (k0lc % 30) * 3 + (k3lc % 3) + 1;
                    errorCorrection = (k3lc % 30) / 3;
                    numOfColumns = (k6lc % 30) + 1;
                    preScan = true;
                    break;
                }
            }

            if (preScan)
            {
                Pdf417Barcode barcode = new Pdf417Barcode(numOfRows, numOfColumns, errorCorrection);
                Scan(ref barcode);

                int maxErasures = (2 << (errorCorrection + 1)) - 3;
                if (barcode.GetErasures() <= maxErasures)
                {
                    int[] codewords = barcode.GetCodewords();
                    if (barcode.CorrectErrors(codewords))
                    {
                        String text = DecodedBitStreamParser.Decode2(codewords);
                        byte[] rawBytes = new byte[1];
                        DecoderResult result = new DecoderResult(rawBytes, text, null, null);
                        return result;
                    }
                    else
                    {
                        throw FormatException.Instance;
                    }
                }
                else
                {
                    throw FormatException.Instance;
                }
            }
            throw FormatException.Instance;
        }

        private bool ScanLineInitial(int y, ref Pdf417Line line)
        {
            int[] blocks = new int[image.Width];
            ScanBlocks(y, blocks);

            int patternLocation = 0;
            int found = PATTERN_NOT_FOUND;
            if ((found = FindStartStopPattern(blocks, ref patternLocation)) != PATTERN_NOT_FOUND)
            {
                if (found == START_PATTERN_FOUND)
                {
                    int K = 0, codeword = 0;
                    bool success = ReadSymbol(blocks, patternLocation + 8, ref K, ref codeword);
                    if (success)
                    {
                        line.LeftColumnIndicator = new Pdf417Symbol(K, codeword);
                        return true;
                    }
                }
                else if (found == END_PATTERN_FOUND)
                {
                    int K = 0, codeword = 0;
                    bool success = ReadSymbol(blocks, patternLocation - 8, ref K, ref codeword);
                    if (success)
                    {
                        line.RightColumnIndicator = new Pdf417Symbol(K, codeword);
                        return true;
                    }
                }
            }
            return false;
        }

        private void Scan(ref Pdf417Barcode barcode)
        {
            int width = image.Width;
            for (int y = 0; y < image.Height; y++)
            {
                int[] blocks = new int[width];
                ScanBlocks(y, blocks);

                int patternLocation = 0;
                int found = PATTERN_NOT_FOUND;
                if ((found = FindStartStopPattern(blocks, ref patternLocation)) != PATTERN_NOT_FOUND)
                {
                    if (found == START_PATTERN_FOUND)
                    {
                        int Kleft = 0, leftIndicator = 0;
                        bool success = ReadSymbol(blocks, patternLocation + 8, ref Kleft, ref leftIndicator);
                        if (success)
                        {
                            int lineNumber = leftIndicator / 30 * 3 + 1 + Kleft / 3;  // line number starts at 1, not 0
                            int[] codewordsInLine = new int[barcode.GetColumns()];
                            int[] clustersInLine = new int[barcode.GetColumns()];
                            for (int i = 0; i < barcode.GetColumns(); i++)
                            {
                                codewordsInLine[i] = -1;
                                clustersInLine[i] = -1;
                                if (ReadSymbol(blocks, patternLocation + 16 + (i * 8), ref clustersInLine[i], ref codewordsInLine[i]))
                                {
                                }
                            }

                            int Kright = 0, rightIndicator = 0;
                            if (ReadSymbol(blocks, patternLocation + 16 + (barcode.GetColumns() * 8), ref Kright, ref rightIndicator))
                            {
                                int lineNumberRight = rightIndicator / 30 * 3 + 1 + Kright / 3;   // line number starts at 1, not 0
                                if (lineNumber == lineNumberRight)
                                {
                                    for (int i = 0; i < barcode.GetColumns(); i++)
                                    {
                                        if (codewordsInLine[i] >= 0)
                                        {
                                            barcode.Set(i, lineNumber - 1, codewordsInLine[i]);
                                        }
                                    }
                                }
                                else
                                {
                                    if (lineNumberRight - lineNumber > 0)
                                    {
                                        int currentLine = lineNumber;
                                        int currentCluster = Kleft;
                                        for (int i = 0; i < barcode.GetColumns(); i++)
                                        {
                                            if (clustersInLine[i] == currentCluster)
                                            {
                                                barcode.Set(i, currentLine - 1, codewordsInLine[i]);
                                            }
                                            else
                                            {
                                                currentLine += GetLineDifference(currentCluster, clustersInLine[i]);
                                                currentCluster = clustersInLine[i];
                                                barcode.Set(i, currentLine - 1, codewordsInLine[i]);
                                            }
                                        }
                                    }
                                    if (lineNumberRight - lineNumber < 0)
                                    {
                                        int currentLine = lineNumber;
                                        int currentCluster = Kleft;
                                        for (int i = 0; i < barcode.GetColumns(); i++)
                                        {
                                            if (clustersInLine[i] == currentCluster)
                                            {
                                                barcode.Set(i, currentLine - 1, codewordsInLine[i]);
                                            }
                                            else
                                            {
                                                currentLine -= GetLineDifference(clustersInLine[i], currentCluster);
                                                currentCluster = clustersInLine[i];
                                                barcode.Set(i, currentLine - 1, codewordsInLine[i]);
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                for (int i = 0; i < barcode.GetColumns(); i++)
                                {
                                    int currentLine = lineNumber;
                                    int currentCluster = Kleft;
                                    if (clustersInLine[i] == currentCluster)
                                    {
                                        barcode.SetGuess(i, currentLine - 1, codewordsInLine[i]);
                                    }
                                    else
                                    {
                                        currentLine += GetLineDifferenceSigned(currentCluster, clustersInLine[i]);
                                        currentCluster = clustersInLine[i];
                                        barcode.SetGuess(i, currentLine - 1, codewordsInLine[i]);
                                    }
                                }
                            }
                        }
                    }
                    else if (found == END_PATTERN_FOUND)
                    {
                        int Kright = 0, rightIndicator = 0;
                        bool success = ReadSymbol(blocks, patternLocation - 8, ref Kright, ref rightIndicator);
                        if (success)
                        {
                            int lineNumberRight = rightIndicator / 30 * 3 + 1 + Kright / 3;  // line number starts at 1, not 0
                            int[] codewordsInLine = new int[barcode.GetColumns()];
                            int[] clustersInLine = new int[barcode.GetColumns()];
                            for (int i = 0; i < barcode.GetColumns(); i++)
                            {
                                codewordsInLine[i] = -1;
                                clustersInLine[i] = -1;
                                int backward = barcode.GetColumns() - i - 1;
                                if (ReadSymbol(blocks, patternLocation - 16 - (i * 8), ref clustersInLine[backward], ref codewordsInLine[backward]))
                                {
                                }
                            }

                            int Kleft = 0, leftIndicator = 0;
                            if (ReadSymbol(blocks, patternLocation - 16 - (barcode.GetColumns() * 8), ref Kleft, ref leftIndicator))
                            {
                                int lineNumberLeft = leftIndicator / 30 * 3 + 1 + Kleft / 3;   // line number starts at 1, not 0
                                if (lineNumberLeft == lineNumberRight)
                                {
                                    for (int i = 0; i < barcode.GetColumns(); i++)
                                    {
                                        if (codewordsInLine[i] >= 0)
                                        {
                                            barcode.Set(i, lineNumberLeft - 1, codewordsInLine[i]);
                                        }
                                    }
                                }
                                else
                                {
                                    if (lineNumberRight - lineNumberLeft > 0)
                                    {
                                        int currentLine = lineNumberLeft;
                                        int currentCluster = Kleft;
                                        for (int i = 0; i < barcode.GetColumns(); i++)
                                        {
                                            if (clustersInLine[i] == currentCluster)
                                            {
                                                barcode.Set(i, currentLine - 1, codewordsInLine[i]);
                                            }
                                            else
                                            {
                                                currentLine += GetLineDifference(currentCluster, clustersInLine[i]);
                                                currentCluster = clustersInLine[i];
                                                barcode.Set(i, currentLine - 1, codewordsInLine[i]);
                                            }
                                        }
                                    }
                                    if (lineNumberRight - lineNumberLeft < 0)
                                    {
                                        int currentLine = lineNumberLeft;
                                        int currentCluster = Kleft;
                                        for (int i = 0; i < barcode.GetColumns(); i++)
                                        {
                                            if (clustersInLine[i] == currentCluster)
                                            {
                                                barcode.Set(i, currentLine - 1, codewordsInLine[i]);
                                            }
                                            else
                                            {
                                                currentLine -= GetLineDifference(clustersInLine[i], currentCluster);
                                                currentCluster = clustersInLine[i];
                                                barcode.Set(i, currentLine - 1, codewordsInLine[i]);
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                for (int i = 0; i < barcode.GetColumns(); i++)
                                {
                                    int backward = barcode.GetColumns() - i - 1;
                                    int currentLine = lineNumberRight;
                                    int currentCluster = Kright;
                                    if (clustersInLine[backward] == currentCluster)
                                    {
                                        barcode.SetGuess(i, currentLine - 1, codewordsInLine[backward]);
                                    }
                                    else
                                    {
                                        currentLine += GetLineDifferenceSigned(currentCluster, clustersInLine[backward]);
                                        currentCluster = clustersInLine[backward];
                                        barcode.SetGuess(i, currentLine - 1, codewordsInLine[backward]);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public int GetLineDifference(int k1, int k2)
        {
            int diff = k2 - k1;
            if (diff < 0) { diff += 9; }
            return diff / 3;
        }

        public int GetLineDifferenceSigned(int k1, int k2)
        {
            int diff = k1 - k2;
            if (diff < 0)
            {
                diff += 9;
            }
            int diffAbs = diff / 3;
            if (diffAbs == 2) { return -1; }
            return diffAbs;
        }


        public void ScanBlocks(int y, int[] blocks)
        {
            for (int i = 0; i < image.GetWidth(); i++)
            {
                blocks[i] = 0;
            }

            int width = image.GetWidth();

            bool white = false;
            int blockPos = 0;
            int start = 0;
            while (!image.Get(start, y) && start < width)
            {
                start++;
            }

            for (int i = start; i < width; i++)
            {
                if (white ^ image.Get(i, y))
                {
                    blocks[blockPos]++;
                }
                else
                {
                    blockPos++;
                    blocks[blockPos] = 1;
                    white = !white;
                }
            }
        }

        public int FindStartStopPattern(int[] blocks, ref int where)
        {
            int width = image.GetWidth();
            int i = 0;
            int[] pattern = blocks;
            while (i + 8 < width && Pdf417Symbol.CheckPatternBlockLengths(pattern))
            {
                if (Pdf417Symbol.CheckPatternIsStartLocator(pattern))
                {
                    where = i;
                    return START_PATTERN_FOUND;
                }
                else if (Pdf417Symbol.CheckPatternIsEndLocator(pattern))
                {
                    where = i;
                    return END_PATTERN_FOUND;
                }
                else
                {
                    i++;
                    pattern = new int[blocks.Length - i];
                    for (int idx = 0; idx < pattern.Length; idx++)
                    {
                        pattern[idx] = blocks[idx + i];
                    }
                }
            }
            return PATTERN_NOT_FOUND;
        }

        public bool ReadSymbol(int[] blocks, int from, ref int K, ref int codeword)
        {
            try
            {
                int width = image.Width;
                int i = from;
                int[] pattern = new int[blocks.Length - from];
                for (int idx = 0; idx < pattern.Length; idx++)
                {
                    pattern[idx] = blocks[idx + from];
                }

                if (i + 8 < width && Pdf417Symbol.CheckPatternBlockLengths(pattern))
                {
                    int[] edges = new int[6];
                    if (Pdf417Symbol.GetPatternEdges(pattern, edges))
                    {
                        K = Pdf417Symbol.GetCluster(edges);
                        if (K > -1)
                        {
                            codeword = FindCodewordByEdges(edges);
                            if (codeword >= 0)
                            {
                                return true;
                            }
                        }
                    }
                }
                return false;
            }
            catch (Exception)
            {
                return false;
            }
        }


        public void ExtractColumnIndicator(Pdf417Symbol symbol, bool left)
        {
            int K = symbol.K;
            if (K != -1)
            {
                int cw = symbol.codeword;
                if (cw >= 0)
                {
                    if ((left && K == 0) || (!left && K == 3))
                    {
                        k0lc = cw;
                    }
                    else if ((left && K == 3) || (!left && K == 6))
                    {
                        k3lc = cw;
                    }
                    else if ((left && K == 6) || (!left && K == 0))
                    {
                        k6lc = cw;
                    }
                }
            }
        }

        private int FindCodewordByEdges(int[] edges)
        {
            string lookupBuffer = "" + edges[0] + edges[1] + edges[2] + edges[3] + edges[4] + edges[5];
            int cwIndex = FindCwIndexByEdgeDistance(lookupBuffer);
            if (cwIndex >= 0)
            {
                return BitMatrixParser.GetCodewordByIndex(cwIndex);
            }
            return -1;
        }

        private int FindCwIndexByEdgeDistance(string ed)
        {
            for (int i = 0; i < SYMBOL_TABLE.Length; i++)
            {
                if (EDGE_DISTANCE_TABLE[i].Equals(ed, StringComparison.OrdinalIgnoreCase))
                {
                    return i;
                }
            }
            return -1;
        }

        public void ConvertSymbol(int pattern, int[] edges)
        {
            int block = 0;
            int white = 1;
            for (int i = 0; i < 8; i++)
            {
                edges[i] = 0;
            }

            for (int i = 0; i < 17; i++)
            {
                int p = (pattern & 1) ^ white;
                if (p != 0)
                {
                    edges[block]++;
                    pattern >>= 1;
                }
                else
                {
                    block++;
                    edges[block] = 1;
                    pattern >>= 1;
                    if (white == 1)
                        white = 0;
                    else
                        white = 1;
                }
            }
        }

    }
}
